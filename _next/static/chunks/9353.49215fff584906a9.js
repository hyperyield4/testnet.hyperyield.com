(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9353],{48519:function(e,t,r){"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Common=void 0;let a=r(92730),i=r(34606),s=r(17187),n=r(47295),c=r(43323),d=r(36987),f=r(52823),h=r(75810),l=r(97438),u=r(93292),m=r(37240),p=r(33337);class g extends s.EventEmitter{constructor(e){super(),this._eips=[],this._customChains=e.customChains??[],this._chainParams=this.setChain(e.chain),this.DEFAULT_HARDFORK=this._chainParams.defaultHardfork??u.Hardfork.Merge,this.HARDFORK_CHANGES=this.hardforks().map(e=>[e.name,m.hardforks[e.name]]),this._hardfork=this.DEFAULT_HARDFORK,void 0!==e.hardfork&&this.setHardfork(e.hardfork),e.eips&&this.setEIPs(e.eips)}static custom(e,t={}){let r=t.baseChain??"mainnet",o={...g._getChainParams(r)};if(o.name="custom-chain","string"!=typeof e)return new g({chain:{...o,...e},...t});if(e===u.CustomChain.PolygonMainnet)return g.custom({name:u.CustomChain.PolygonMainnet,chainId:137,networkId:137},t);if(e===u.CustomChain.PolygonMumbai)return g.custom({name:u.CustomChain.PolygonMumbai,chainId:80001,networkId:80001},t);if(e===u.CustomChain.ArbitrumRinkebyTestnet)return g.custom({name:u.CustomChain.ArbitrumRinkebyTestnet,chainId:421611,networkId:421611},t);if(e===u.CustomChain.ArbitrumOne)return g.custom({name:u.CustomChain.ArbitrumOne,chainId:42161,networkId:42161},t);if(e===u.CustomChain.xDaiChain)return g.custom({name:u.CustomChain.xDaiChain,chainId:100,networkId:100},t);if(e===u.CustomChain.OptimisticKovan)return g.custom({name:u.CustomChain.OptimisticKovan,chainId:69,networkId:69},{hardfork:u.Hardfork.Berlin,...t});if(e===u.CustomChain.OptimisticEthereum)return g.custom({name:u.CustomChain.OptimisticEthereum,chainId:10,networkId:10},{hardfork:u.Hardfork.Berlin,...t});throw Error(`Custom chain ${e} not supported`)}static fromGethGenesis(e,{chain:t,eips:r,genesisHash:o,hardfork:a,mergeForkIdPostMerge:i}){let s=(0,p.parseGethGenesis)(e,t,i),n=new g({chain:s.name??"custom",customChains:[s],eips:r,hardfork:a??s.hardfork});return void 0!==o&&n.setForkHashes(o),n}static isSupportedChainId(e){return!!this._getInitializedChains().names[e.toString()]}static _getChainParams(e,t){let r=this._getInitializedChains(t);if("number"==typeof e||"bigint"==typeof e){if(e=e.toString(),r.names[e]){let t=r.names[e];return r[t]}throw Error(`Chain with ID ${e} not supported`)}if(void 0!==r[e])return r[e];throw Error(`Chain with name ${e} not supported`)}setChain(e){if("number"==typeof e||"bigint"==typeof e||"string"==typeof e)this._chainParams=g._getChainParams(e,this._customChains);else if("object"==typeof e){if(this._customChains.length>0)throw Error("Chain must be a string, number, or bigint when initialized with customChains passed in");for(let t of["networkId","genesis","hardforks","bootstrapNodes"])if(!(t in e))throw Error(`Missing required chain parameter: ${t}`);this._chainParams=e}else throw Error("Wrong input format");for(let e of this.hardforks())if(void 0===e.block)throw Error("Hardfork cannot have undefined block number");return this._chainParams}setHardfork(e){let t=!1;for(let r of this.HARDFORK_CHANGES)r[0]===e&&(this._hardfork!==e&&(this._hardfork=e,this.emit("hardforkChanged",e)),t=!0);if(!t)throw Error(`Hardfork with name ${e} not supported`)}getHardforkByBlockNumber(e,t,r){e=(0,a.toType)(e,a.TypeOutput.BigInt),t=(0,a.toType)(t,a.TypeOutput.BigInt),r=(0,a.toType)(r,a.TypeOutput.Number);let o=this.hardforks().filter(e=>null!==e.block||null!==e.ttd&&void 0!==e.ttd||void 0!==e.timestamp),i=o.findIndex(e=>null!==e.ttd&&void 0!==e.ttd);if(o.slice(i+1).findIndex(e=>null!==e.ttd&&void 0!==e.ttd)>=0)throw Error("More than one merge hardforks found with ttd specified");let s=o.findIndex(t=>null!==t.block&&t.block>e||void 0!==r&&Number(t.timestamp)>r);if(-1===s)s=o.length;else if(0===s)throw Error("Must have at least one hardfork at block 0");if(void 0===r){let e=o.slice(0,s).reverse().findIndex(e=>null!==e.block||void 0!==e.ttd);s-=e}if(null===o[s-=1].block&&void 0===o[s].timestamp)(null==t||BigInt(o[s].ttd)>t)&&(s-=1);else if(i>=0&&null!=t){if(s>=i&&BigInt(o[i].ttd)>t)throw Error("Maximum HF determined by total difficulty is lower than the block number HF");if(s<i&&BigInt(o[i].ttd)<=t)throw Error("HF determined by block number is lower than the minimum total difficulty HF")}let n=s;for(;s<o.length-1&&o[s].block===o[s+1].block&&o[s].timestamp===o[s+1].timestamp;s++);if(r){if(o.slice(0,n).reduce((e,t)=>Math.max(Number(t.timestamp??"0"),e),0)>r)throw Error("Maximum HF determined by timestamp is lower than the block number/ttd HF");if(o.slice(s+1).reduce((e,t)=>Math.min(Number(t.timestamp??r),e),r)<r)throw Error("Maximum HF determined by block number/ttd is lower than timestamp HF")}return o[s].name}setHardforkByBlockNumber(e,t,r){let o=this.getHardforkByBlockNumber(e,t,r);return this.setHardfork(o),o}_getHardfork(e){for(let t of this.hardforks())if(t.name===e)return t;return null}setEIPs(e=[]){for(let t of e){if(!(t in l.EIPs))throw Error(`${t} not supported`);let r=this.gteHardfork(l.EIPs[t].minimumHardfork);if(!r)throw Error(`${t} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${r}`);if(void 0!==l.EIPs[t].requiredEIPs){for(let r of l.EIPs[t].requiredEIPs)if(!(e.includes(r)||this.isActivatedEIP(r)))throw Error(`${t} requires EIP ${r}, but is not included in the EIP list`)}}this._eips=e}param(e,t){let r;for(let o of this._eips)if(void 0!==(r=this.paramByEIP(e,t,o)))return r;return this.paramByHardfork(e,t,this._hardfork)}paramByHardfork(e,t,r){let o=null;for(let a of this.HARDFORK_CHANGES){if("eips"in a[1])for(let r of a[1].eips){let a=this.paramByEIP(e,t,r);o="bigint"==typeof a?a:o}else{if(void 0===a[1][e])throw Error(`Topic ${e} not defined`);void 0!==a[1][e][t]&&(o=a[1][e][t].v)}if(a[0]===r)break}return BigInt(o??0)}paramByEIP(e,t,r){if(!(r in l.EIPs))throw Error(`${r} not supported`);let o=l.EIPs[r];if(!(e in o))throw Error(`Topic ${e} not defined`);if(void 0!==o[e][t])return BigInt(o[e][t].v)}paramByBlock(e,t,r,o,a){let i=this.getHardforkByBlockNumber(r,o,a);return this.paramByHardfork(e,t,i)}isActivatedEIP(e){if(this.eips().includes(e))return!0;for(let t of this.HARDFORK_CHANGES){let r=t[1];if(this.gteHardfork(r.name)&&"eips"in r&&r.eips.includes(e))return!0}return!1}hardforkIsActiveOnBlock(e,t){t=(0,a.toType)(t,a.TypeOutput.BigInt),e=e??this._hardfork;let r=this.hardforkBlock(e);return"bigint"==typeof r&&r!==BigInt(0)&&t>=r}activeOnBlock(e){return this.hardforkIsActiveOnBlock(null,e)}hardforkGteHardfork(e,t){e=e??this._hardfork;let r=this.hardforks(),o=-1,a=-1,i=0;for(let s of r)s.name===e&&(o=i),s.name===t&&(a=i),i+=1;return o>=a&&-1!==a}gteHardfork(e){return this.hardforkGteHardfork(null,e)}hardforkBlock(e){e=e??this._hardfork;let t=this._getHardfork(e)?.block;return null==t?null:BigInt(t)}hardforkTimestamp(e){e=e??this._hardfork;let t=this._getHardfork(e)?.timestamp;return null==t?null:BigInt(t)}eipBlock(e){for(let t of this.HARDFORK_CHANGES){let r=t[1];if("eips"in r&&r.eips.includes(e))return this.hardforkBlock(t[0])}return null}hardforkTTD(e){e=e??this._hardfork;let t=this._getHardfork(e)?.ttd;return null==t?null:BigInt(t)}isHardforkBlock(e,t){e=(0,a.toType)(e,a.TypeOutput.BigInt),t=t??this._hardfork;let r=this.hardforkBlock(t);return"bigint"==typeof r&&r!==BigInt(0)&&r===e}nextHardforkBlockOrTimestamp(e){e=e??this._hardfork;let t=this.hardforks(),r=t.findIndex(t=>t.name===e);if(e===u.Hardfork.Merge&&(r-=1),r<0)return null;let o=t[r].timestamp??t[r].block;o=null!=o?Number(o):null;let a=t.slice(r+1).find(e=>{let t=e.timestamp??e.block;return t=null!=t?Number(t):null,e.name!==u.Hardfork.Merge&&null!=t&&t!==o});if(void 0===a)return null;let i=a.timestamp??a.block;return null==i?null:BigInt(i)}nextHardforkBlock(e){e=e??this._hardfork;let t=this.hardforkBlock(e);if(null===t&&e===u.Hardfork.Merge){let e=this.hardforks(),r=e.findIndex(e=>null!==e.ttd&&void 0!==e.ttd);if(r<0)throw Error("Merge hardfork should have been found");t=this.hardforkBlock(e[r-1].name)}return null===t?null:this.hardforks().reduce((e,r)=>{let o=BigInt(null===r.block||void 0!==r.ttd&&null!==r.ttd?0:r.block);return o>t&&null===e?o:e},null)}isNextHardforkBlock(e,t){e=(0,a.toType)(e,a.TypeOutput.BigInt),t=t??this._hardfork;let r=this.nextHardforkBlock(t);return null!==r&&r===e}_calcForkHash(e,t){let r=o.alloc(0),s=0;for(let t of this.hardforks()){let{block:a,timestamp:i,name:n}=t,c=i??a;if("number"==typeof(c=null!==c?Number(c):null)&&0!==c&&c!==s&&n!==u.Hardfork.Merge){let e=o.from(c.toString(16).padStart(16,"0"),"hex");r=o.concat([r,e]),s=c}if(t.name===e)break}let n=o.concat([t,r]),c=(0,a.intToBuffer)((0,i.buf)(n)>>>0).toString("hex");return`0x${c}`}forkHash(e,t){e=e??this._hardfork;let r=this._getHardfork(e);if(null===r||r?.block===null&&r?.timestamp===void 0&&r?.ttd===void 0)throw Error("No fork hash calculation possible for future hardfork");if(r?.forkHash!==null&&r?.forkHash!==void 0)return r.forkHash;if(!t)throw Error("genesisHash required for forkHash calculation");return this._calcForkHash(e,t)}hardforkForForkHash(e){let t=this.hardforks().filter(t=>t.forkHash===e);return t.length>=1?t[t.length-1]:null}setForkHashes(e){for(let t of this.hardforks()){let r=t.timestamp??t.block;(null===t.forkHash||void 0===t.forkHash)&&(null!=r||void 0!==t.ttd)&&(t.forkHash=this.forkHash(t.name,e))}}genesis(){return this._chainParams.genesis}hardforks(){return this._chainParams.hardforks}bootstrapNodes(){return this._chainParams.bootstrapNodes}dnsNetworks(){return this._chainParams.dnsNetworks}hardfork(){return this._hardfork}chainId(){return BigInt(this._chainParams.chainId)}chainName(){return this._chainParams.name}networkId(){return BigInt(this._chainParams.networkId)}eips(){return this._eips}consensusType(){let e;let t=this.hardfork();for(let r of this.HARDFORK_CHANGES)if("consensus"in r[1]&&(e=r[1].consensus.type),r[0]===t)break;return e??this._chainParams.consensus.type}consensusAlgorithm(){let e;let t=this.hardfork();for(let r of this.HARDFORK_CHANGES)if("consensus"in r[1]&&(e=r[1].consensus.algorithm),r[0]===t)break;return e??this._chainParams.consensus.algorithm}consensusConfig(){let e;let t=this.hardfork();for(let r of this.HARDFORK_CHANGES)if("consensus"in r[1]&&(e=r[1].consensus[r[1].consensus.algorithm]),r[0]===t)break;return e??this._chainParams.consensus[this.consensusAlgorithm()]??{}}copy(){let e=Object.assign(Object.create(Object.getPrototypeOf(this)),this);return e.removeAllListeners(),e}static _getInitializedChains(e){let t={};for(let[e,r]of Object.entries(u.Chain))t[r]=e.toLowerCase();let r={mainnet:c,ropsten:f,rinkeby:d,goerli:n,sepolia:h};if(e)for(let o of e){let{name:e}=o;t[o.chainId.toString()]=e,r[e]=o}return r.names=t,r}}t.Common=g},97438:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EIPs=void 0,t.EIPs={1153:r(64104),1559:r(41187),2315:r(22643),2537:r(77158),2565:r(8499),2718:r(76796),2929:r(18345),2930:r(18185),3074:r(98034),3198:r(40445),3529:r(16102),3540:r(1800),3541:r(22867),3554:r(98691),3607:r(74519),3651:r(37459),3670:r(6810),3675:r(21794),3855:r(27749),3860:r(99063),4345:r(47113),4399:r(59602),4844:r(4240),4895:r(15357),5133:r(84304)}},93292:function(e,t){"use strict";var r,o,a,i,s;Object.defineProperty(t,"__esModule",{value:!0}),t.CustomChain=t.ConsensusAlgorithm=t.ConsensusType=t.Hardfork=t.Chain=void 0,(r=t.Chain||(t.Chain={}))[r.Mainnet=1]="Mainnet",r[r.Ropsten=3]="Ropsten",r[r.Rinkeby=4]="Rinkeby",r[r.Goerli=5]="Goerli",r[r.Sepolia=11155111]="Sepolia",(o=t.Hardfork||(t.Hardfork={})).Chainstart="chainstart",o.Homestead="homestead",o.Dao="dao",o.TangerineWhistle="tangerineWhistle",o.SpuriousDragon="spuriousDragon",o.Byzantium="byzantium",o.Constantinople="constantinople",o.Petersburg="petersburg",o.Istanbul="istanbul",o.MuirGlacier="muirGlacier",o.Berlin="berlin",o.London="london",o.ArrowGlacier="arrowGlacier",o.GrayGlacier="grayGlacier",o.MergeForkIdTransition="mergeForkIdTransition",o.Merge="merge",o.Shanghai="shanghai",o.ShardingForkDev="shardingFork",(a=t.ConsensusType||(t.ConsensusType={})).ProofOfStake="pos",a.ProofOfWork="pow",a.ProofOfAuthority="poa",(i=t.ConsensusAlgorithm||(t.ConsensusAlgorithm={})).Ethash="ethash",i.Clique="clique",i.Casper="casper",(s=t.CustomChain||(t.CustomChain={})).PolygonMainnet="polygon-mainnet",s.PolygonMumbai="polygon-mumbai",s.ArbitrumRinkebyTestnet="arbitrum-rinkeby-testnet",s.ArbitrumOne="arbitrum-one",s.xDaiChain="x-dai-chain",s.OptimisticKovan="optimistic-kovan",s.OptimisticEthereum="optimistic-ethereum"},37240:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hardforks=void 0,t.hardforks={chainstart:r(28158),homestead:r(45516),dao:r(36888),tangerineWhistle:r(94350),spuriousDragon:r(82146),byzantium:r(3099),constantinople:r(3068),petersburg:r(13385),istanbul:r(10208),muirGlacier:r(90050),berlin:r(15880),london:r(73352),shanghai:r(30369),arrowGlacier:r(24211),grayGlacier:r(87184),mergeForkIdTransition:r(99402),merge:r(977),shardingFork:r(7968)}},27783:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var a=Object.getOwnPropertyDescriptor(t,r);(!a||("get"in a?!t.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,a)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),a(r(48519),t),a(r(93292),t),a(r(74294),t),a(r(33337),t)},74294:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0})},33337:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.parseGethGenesis=void 0;let o=r(92730),a=r(93292);t.parseGethGenesis=function(e,t,r){try{if(["config","difficulty","gasLimit","alloc"].some(t=>!(t in e)))throw Error("Invalid format, expected geth genesis fields missing");return void 0!==t&&(e.name=t),function(e,t=!0){let{name:r,config:i,difficulty:s,mixHash:n,gasLimit:c,coinbase:d,baseFeePerGas:f}=e,{extraData:h,timestamp:l,nonce:u}=e,m=Number(l),{chainId:p}=i;if(""===h&&(h="0x"),(0,o.isHexPrefixed)(l)||(l=(0,o.intToHex)(parseInt(l))),18!==u.length){var g;u=(g=u)&&"0x0"!==g?(0,o.isHexPrefixed)(g)?"0x"+(0,o.stripHexPrefix)(g).padStart(16,"0"):"0x"+g.padStart(16,"0"):"0x0000000000000000"}if(i.eip155Block!==i.eip158Block)throw Error("EIP155 block number must equal EIP 158 block number since both are part of SpuriousDragon hardfork and the client only supports activating the full hardfork");let b={name:r,chainId:p,networkId:p,genesis:{timestamp:l,gasLimit:parseInt(c),difficulty:parseInt(s),nonce:u,extraData:h,mixHash:n,coinbase:d,baseFeePerGas:f},hardfork:void 0,hardforks:[],bootstrapNodes:[],consensus:void 0!==i.clique?{type:"poa",algorithm:"clique",clique:{period:i.clique.period??i.clique.blockperiodseconds,epoch:i.clique.epoch??i.clique.epochlength}}:{type:"pow",algorithm:"ethash",ethash:{}}},v={[a.Hardfork.Homestead]:{name:"homesteadBlock"},[a.Hardfork.Dao]:{name:"daoForkBlock"},[a.Hardfork.TangerineWhistle]:{name:"eip150Block"},[a.Hardfork.SpuriousDragon]:{name:"eip155Block"},[a.Hardfork.Byzantium]:{name:"byzantiumBlock"},[a.Hardfork.Constantinople]:{name:"constantinopleBlock"},[a.Hardfork.Petersburg]:{name:"petersburgBlock"},[a.Hardfork.Istanbul]:{name:"istanbulBlock"},[a.Hardfork.MuirGlacier]:{name:"muirGlacierBlock"},[a.Hardfork.Berlin]:{name:"berlinBlock"},[a.Hardfork.London]:{name:"londonBlock"},[a.Hardfork.MergeForkIdTransition]:{name:"mergeForkBlock",postMerge:t},[a.Hardfork.Shanghai]:{name:"shanghaiTime",postMerge:!0,isTimestamp:!0},[a.Hardfork.ShardingForkDev]:{name:"shardingForkTime",postMerge:!0,isTimestamp:!0}},k=Object.keys(v).reduce((e,t)=>(e[v[t].name]=t,e),{}),y=Object.keys(i).filter(e=>void 0!==k[e]&&void 0!==i[e]&&null!==i[e]);if(b.hardforks=y.map(e=>({name:k[e],block:!0===v[k[e]].isTimestamp||"number"!=typeof i[e]?null:i[e],timestamp:!0===v[k[e]].isTimestamp&&"number"==typeof i[e]?i[e]:void 0})).filter(e=>null!==e.block||void 0!==e.timestamp),b.hardforks.sort(function(e,t){return(e.block??1/0)-(t.block??1/0)}),b.hardforks.sort(function(e,t){return(e.timestamp??m)-(t.timestamp??m)}),void 0!==i.terminalTotalDifficulty){let e={name:a.Hardfork.Merge,ttd:i.terminalTotalDifficulty,block:null},t=b.hardforks.findIndex(e=>v[e.name]?.postMerge===!0);-1!==t?b.hardforks.splice(t,0,e):b.hardforks.push(e)}let I=b.hardforks.length>0?b.hardforks.slice(-1)[0]:void 0;return b.hardfork=I?.name,b.hardforks.unshift({name:a.Hardfork.Chainstart,block:0}),b}(e,r)}catch(e){throw Error(`Error parsing parameters file: ${e.message}`)}}},65652:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.BaseTransaction=void 0;let o=r(27783),a=r(92730),i=r(2074),s=r(9939);class n{constructor(e,t){this.cache={hash:void 0,dataFee:void 0},this.activeCapabilities=[],this.DEFAULT_CHAIN=o.Chain.Mainnet,this.DEFAULT_HARDFORK=o.Hardfork.Merge;let{nonce:r,gasLimit:i,to:n,value:c,data:d,v:f,r:h,s:l,type:u}=e;this._type=Number((0,a.bufferToBigInt)((0,a.toBuffer)(u))),this.txOptions=t;let m=(0,a.toBuffer)(""===n?"0x":n),p=(0,a.toBuffer)(""===f?"0x":f),g=(0,a.toBuffer)(""===h?"0x":h),b=(0,a.toBuffer)(""===l?"0x":l);this.nonce=(0,a.bufferToBigInt)((0,a.toBuffer)(""===r?"0x":r)),this.gasLimit=(0,a.bufferToBigInt)((0,a.toBuffer)(""===i?"0x":i)),this.to=m.length>0?new a.Address(m):void 0,this.value=(0,a.bufferToBigInt)((0,a.toBuffer)(""===c?"0x":c)),this.data=(0,a.toBuffer)(""===d?"0x":d),this.v=p.length>0?(0,a.bufferToBigInt)(p):void 0,this.r=g.length>0?(0,a.bufferToBigInt)(g):void 0,this.s=b.length>0?(0,a.bufferToBigInt)(b):void 0,this._validateCannotExceedMaxInteger({value:this.value,r:this.r,s:this.s}),this._validateCannotExceedMaxInteger({gasLimit:this.gasLimit},64),this._validateCannotExceedMaxInteger({nonce:this.nonce},64,!0);let v=void 0===this.to||null===this.to,k=t.allowUnlimitedInitCodeSize??!1,y=t.common??this._getCommon();v&&y.isActivatedEIP(3860)&&!1===k&&(0,s.checkMaxInitCodeSize)(y,this.data.length)}get type(){return this._type}supports(e){return this.activeCapabilities.includes(e)}validate(e=!1){let t=[];return this.getBaseFee()>this.gasLimit&&t.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`),this.isSigned()&&!this.verifySignature()&&t.push("Invalid Signature"),e?t:0===t.length}_validateYParity(){let{v:e}=this;if(void 0!==e&&e!==BigInt(0)&&e!==BigInt(1))throw Error(this._errorMsg("The y-parity of the transaction should either be 0 or 1"))}_validateHighS(){let{s:e}=this;if(this.common.gteHardfork("homestead")&&void 0!==e&&e>a.SECP256K1_ORDER_DIV_2)throw Error(this._errorMsg("Invalid Signature: s-values greater than secp256k1n/2 are considered invalid"))}getBaseFee(){let e=this.common.param("gasPrices","tx"),t=this.getDataFee();if(e&&(t+=e),this.common.gteHardfork("homestead")&&this.toCreationAddress()){let e=this.common.param("gasPrices","txCreation");e&&(t+=e)}return t}getDataFee(){let e=this.common.param("gasPrices","txDataZero"),t=this.common.param("gasPrices","txDataNonZero"),r=BigInt(0);for(let o=0;o<this.data.length;o++)0===this.data[o]?r+=e:r+=t;if((void 0===this.to||null===this.to)&&this.common.isActivatedEIP(3860)){let e=BigInt(Math.ceil(this.data.length/32));r+=this.common.param("gasPrices","initCodeWordCost")*e}return r}toCreationAddress(){return void 0===this.to||0===this.to.buf.length}isSigned(){let{v:e,r:t,s:r}=this;return void 0!==e&&void 0!==t&&void 0!==r}verifySignature(){try{let e=this.getSenderPublicKey();return 0!==(0,a.unpadBuffer)(e).length}catch(e){return!1}}getSenderAddress(){return new a.Address((0,a.publicToAddress)(this.getSenderPublicKey()))}sign(e){if(32!==e.length)throw Error(this._errorMsg("Private key must be 32 bytes in length."));let t=!1;0===this.type&&this.common.gteHardfork("spuriousDragon")&&!this.supports(i.Capability.EIP155ReplayProtection)&&(this.activeCapabilities.push(i.Capability.EIP155ReplayProtection),t=!0);let r=this.getMessageToSign(!0),{v:o,r:s,s:n}=(0,a.ecsign)(r,e),c=this._processSignature(o,s,n);if(t){let e=this.activeCapabilities.indexOf(i.Capability.EIP155ReplayProtection);e>-1&&this.activeCapabilities.splice(e,1)}return c}_getCommon(e,t){if(void 0===t)return e?.copy()??new o.Common({chain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK});{let r=(0,a.bufferToBigInt)((0,a.toBuffer)(t));if(e){if(e.chainId()!==r)throw Error(this._errorMsg("The chain ID does not match the chain ID of Common"));return e.copy()}return o.Common.isSupportedChainId(r)?new o.Common({chain:r,hardfork:this.DEFAULT_HARDFORK}):o.Common.custom({name:"custom-chain",networkId:r,chainId:r},{baseChain:this.DEFAULT_CHAIN,hardfork:this.DEFAULT_HARDFORK})}}_validateCannotExceedMaxInteger(e,t=256,r=!1){for(let[o,i]of Object.entries(e))switch(t){case 64:if(r){if(void 0!==i&&i>=a.MAX_UINT64)throw Error(this._errorMsg(`${o} cannot equal or exceed MAX_UINT64 (2^64-1), given ${i}`))}else if(void 0!==i&&i>a.MAX_UINT64)throw Error(this._errorMsg(`${o} cannot exceed MAX_UINT64 (2^64-1), given ${i}`));break;case 256:if(r){if(void 0!==i&&i>=a.MAX_INTEGER)throw Error(this._errorMsg(`${o} cannot equal or exceed MAX_INTEGER (2^256-1), given ${i}`))}else if(void 0!==i&&i>a.MAX_INTEGER)throw Error(this._errorMsg(`${o} cannot exceed MAX_INTEGER (2^256-1), given ${i}`));break;default:throw Error(this._errorMsg("unimplemented bits value"))}}static _validateNotArray(e){let t=["nonce","gasPrice","gasLimit","to","value","data","v","r","s","type","baseFee","maxFeePerGas","chainId"];for(let[r,o]of Object.entries(e))if(t.includes(r)&&Array.isArray(o))throw Error(`${r} cannot be an array`)}_getSharedErrorPostfix(){let e="";try{e=this.isSigned()?(0,a.bufferToHex)(this.hash()):"not available (unsigned)"}catch(t){e="error"}let t="";try{t=this.isSigned().toString()}catch(t){e="error"}let r="";try{r=this.common.hardfork()}catch(e){r="error"}return`tx type=${this.type} hash=${e} nonce=${this.nonce} value=${this.value} signed=${t} hf=${r}`}}t.BaseTransaction=n},37365:function(e,t,r){"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.FeeMarketEIP1559Transaction=void 0;let a=r(5507),i=r(92730),s=r(35869),n=r(65652),c=r(9939),d=o.from("2".padStart(2,"0"),"hex");class f extends n.BaseTransaction{constructor(e,t={}){super({...e,type:2},t),this.DEFAULT_HARDFORK="london";let{chainId:r,accessList:o,maxFeePerGas:a,maxPriorityFeePerGas:s}=e;if(this.common=this._getCommon(t.common,r),this.chainId=this.common.chainId(),!1===this.common.isActivatedEIP(1559))throw Error("EIP-1559 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([1559,2718,2930]);let d=c.AccessLists.getAccessListData(o??[]);if(this.accessList=d.accessList,this.AccessListJSON=d.AccessListJSON,c.AccessLists.verifyAccessList(this.accessList),this.maxFeePerGas=(0,i.bufferToBigInt)((0,i.toBuffer)(""===a?"0x":a)),this.maxPriorityFeePerGas=(0,i.bufferToBigInt)((0,i.toBuffer)(""===s?"0x":s)),this._validateCannotExceedMaxInteger({maxFeePerGas:this.maxFeePerGas,maxPriorityFeePerGas:this.maxPriorityFeePerGas}),n.BaseTransaction._validateNotArray(e),this.gasLimit*this.maxFeePerGas>i.MAX_INTEGER)throw Error(this._errorMsg("gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)"));if(this.maxFeePerGas<this.maxPriorityFeePerGas)throw Error(this._errorMsg("maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)"));this._validateYParity(),this._validateHighS(),(t?.freeze??!0)&&Object.freeze(this)}static fromTxData(e,t={}){return new f(e,t)}static fromSerializedTx(e,t={}){if(!e.slice(0,1).equals(d))throw Error(`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: 2, received: ${e.slice(0,1).toString("hex")}`);let r=(0,i.arrToBufArr)(a.RLP.decode(e.slice(1)));if(!Array.isArray(r))throw Error("Invalid serialized tx input: must be array");return f.fromValuesArray(r,t)}static fromValuesArray(e,t={}){if(9!==e.length&&12!==e.length)throw Error("Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).");let[r,o,a,s,n,c,d,h,l,u,m,p]=e;return this._validateNotArray({chainId:r,v:u}),(0,i.validateNoLeadingZeroes)({nonce:o,maxPriorityFeePerGas:a,maxFeePerGas:s,gasLimit:n,value:d,v:u,r:m,s:p}),new f({chainId:(0,i.bufferToBigInt)(r),nonce:o,maxPriorityFeePerGas:a,maxFeePerGas:s,gasLimit:n,to:c,value:d,data:h,accessList:l??[],v:void 0!==u?(0,i.bufferToBigInt)(u):void 0,r:m,s:p},t)}getDataFee(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;let e=super.getDataFee();return e+=BigInt(c.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:e,hardfork:this.common.hardfork()}),e}getUpfrontCost(e=BigInt(0)){let t=this.maxPriorityFeePerGas,r=this.maxFeePerGas-e;return this.gasLimit*((t<r?t:r)+e)+this.value}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.chainId),(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.maxPriorityFeePerGas),(0,i.bigIntToUnpaddedBuffer)(this.maxFeePerGas),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:o.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):o.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):o.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):o.from([])]}serialize(){let e=this.raw();return o.concat([d,o.from(a.RLP.encode((0,i.bufArrToArr)(e)))])}getMessageToSign(e=!0){let t=this.raw().slice(0,9),r=o.concat([d,o.from(a.RLP.encode((0,i.bufArrToArr)(t)))]);return e?o.from((0,s.keccak256)(r)):r}hash(){if(!this.isSigned())throw Error(this._errorMsg("Cannot call hash method if transaction is not signed"));return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=o.from((0,s.keccak256)(this.serialize()))),this.cache.hash):o.from((0,s.keccak256)(this.serialize()))}getMessageToVerifySignature(){return this.getMessageToSign()}getSenderPublicKey(){if(!this.isSigned())throw Error(this._errorMsg("Cannot call this method if transaction is not signed"));let e=this.getMessageToVerifySignature(),{v:t,r,s:o}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t+BigInt(27),(0,i.bigIntToUnpaddedBuffer)(r),(0,i.bigIntToUnpaddedBuffer)(o))}catch(e){throw Error(this._errorMsg("Invalid Signature"))}}_processSignature(e,t,r){let o={...this.txOptions,common:this.common};return f.fromTxData({chainId:this.chainId,nonce:this.nonce,maxPriorityFeePerGas:this.maxPriorityFeePerGas,maxFeePerGas:this.maxFeePerGas,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:e-BigInt(27),r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(r)},o)}toJSON(){let e=c.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,i.bigIntToHex)(this.chainId),nonce:(0,i.bigIntToHex)(this.nonce),maxPriorityFeePerGas:(0,i.bigIntToHex)(this.maxPriorityFeePerGas),maxFeePerGas:(0,i.bigIntToHex)(this.maxFeePerGas),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}errorStr(){return this._getSharedErrorPostfix()+` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`}_errorMsg(e){return`${e} (${this.errorStr()})`}}t.FeeMarketEIP1559Transaction=f},56769:function(e,t,r){"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.AccessListEIP2930Transaction=void 0;let a=r(5507),i=r(92730),s=r(35869),n=r(65652),c=r(9939),d=o.from("1".padStart(2,"0"),"hex");class f extends n.BaseTransaction{constructor(e,t={}){super({...e,type:1},t),this.DEFAULT_HARDFORK="berlin";let{chainId:r,accessList:o,gasPrice:a}=e;if(this.common=this._getCommon(t.common,r),this.chainId=this.common.chainId(),!this.common.isActivatedEIP(2930))throw Error("EIP-2930 not enabled on Common");this.activeCapabilities=this.activeCapabilities.concat([2718,2930]);let s=c.AccessLists.getAccessListData(o??[]);if(this.accessList=s.accessList,this.AccessListJSON=s.AccessListJSON,c.AccessLists.verifyAccessList(this.accessList),this.gasPrice=(0,i.bufferToBigInt)((0,i.toBuffer)(""===a?"0x":a)),this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),n.BaseTransaction._validateNotArray(e),this.gasPrice*this.gasLimit>i.MAX_INTEGER)throw Error(this._errorMsg("gasLimit * gasPrice cannot exceed MAX_INTEGER"));this._validateYParity(),this._validateHighS(),(t?.freeze??!0)&&Object.freeze(this)}static fromTxData(e,t={}){return new f(e,t)}static fromSerializedTx(e,t={}){if(!e.slice(0,1).equals(d))throw Error(`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: 1, received: ${e.slice(0,1).toString("hex")}`);let r=(0,i.arrToBufArr)(a.RLP.decode(Uint8Array.from(e.slice(1))));if(!Array.isArray(r))throw Error("Invalid serialized tx input: must be array");return f.fromValuesArray(r,t)}static fromValuesArray(e,t={}){if(8!==e.length&&11!==e.length)throw Error("Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).");let[r,o,a,s,n,c,d,h,l,u,m]=e;return this._validateNotArray({chainId:r,v:l}),(0,i.validateNoLeadingZeroes)({nonce:o,gasPrice:a,gasLimit:s,value:c,v:l,r:u,s:m}),new f({chainId:(0,i.bufferToBigInt)(r),nonce:o,gasPrice:a,gasLimit:s,to:n,value:c,data:d,accessList:h??[],v:void 0!==l?(0,i.bufferToBigInt)(l):void 0,r:u,s:m},t)}getDataFee(){if(this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork())return this.cache.dataFee.value;let e=super.getDataFee();return e+=BigInt(c.AccessLists.getDataFeeEIP2930(this.accessList,this.common)),Object.isFrozen(this)&&(this.cache.dataFee={value:e,hardfork:this.common.hardfork()}),e}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.chainId),(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:o.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,this.accessList,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):o.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):o.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):o.from([])]}serialize(){let e=this.raw();return o.concat([d,o.from(a.RLP.encode((0,i.bufArrToArr)(e)))])}getMessageToSign(e=!0){let t=this.raw().slice(0,8),r=o.concat([d,o.from(a.RLP.encode((0,i.bufArrToArr)(t)))]);return e?o.from((0,s.keccak256)(r)):r}hash(){if(!this.isSigned())throw Error(this._errorMsg("Cannot call hash method if transaction is not signed"));return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=o.from((0,s.keccak256)(this.serialize()))),this.cache.hash):o.from((0,s.keccak256)(this.serialize()))}getMessageToVerifySignature(){return this.getMessageToSign()}getSenderPublicKey(){if(!this.isSigned())throw Error(this._errorMsg("Cannot call this method if transaction is not signed"));let e=this.getMessageToVerifySignature(),{v:t,r,s:o}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t+BigInt(27),(0,i.bigIntToUnpaddedBuffer)(r),(0,i.bigIntToUnpaddedBuffer)(o))}catch(e){throw Error(this._errorMsg("Invalid Signature"))}}_processSignature(e,t,r){let o={...this.txOptions,common:this.common};return f.fromTxData({chainId:this.chainId,nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,accessList:this.accessList,v:e-BigInt(27),r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(r)},o)}toJSON(){let e=c.AccessLists.getAccessListJSON(this.accessList);return{chainId:(0,i.bigIntToHex)(this.chainId),nonce:(0,i.bigIntToHex)(this.nonce),gasPrice:(0,i.bigIntToHex)(this.gasPrice),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),accessList:e,v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}errorStr(){return this._getSharedErrorPostfix()+` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length??0}`}_errorMsg(e){return`${e} (${this.errorStr()})`}}t.AccessListEIP2930Transaction=f},72346:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.normalizeTxParams=void 0;let o=r(92730);t.normalizeTxParams=e=>{let t=Object.assign({},e);return t.gasLimit=(0,o.toType)(t.gasLimit??t.gas,o.TypeOutput.BigInt),t.data=void 0===t.data?t.input:t.data,t.gasPrice=void 0!==t.gasPrice?BigInt(t.gasPrice):void 0,t.value=void 0!==t.value?BigInt(t.value):void 0,t.to=null!==t.to&&void 0!==t.to?(0,o.setLengthLeft)((0,o.toBuffer)(t.to),20):null,t.v="0x0"===t.v?"0x":t.v,t.r="0x0"===t.r?"0x":t.r,t.s="0x0"===t.s?"0x":t.s,"0x"!==t.v&&(t.v=(0,o.toType)(t.v,o.TypeOutput.BigInt)),t}},59353:function(e,t,r){"use strict";var o=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var a=Object.getOwnPropertyDescriptor(t,r);(!a||("get"in a?!t.__esModule:a.writable||a.configurable))&&(a={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,a)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||o(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionFactory=t.Transaction=t.AccessListEIP2930Transaction=t.FeeMarketEIP1559Transaction=void 0;var i=r(37365);Object.defineProperty(t,"FeeMarketEIP1559Transaction",{enumerable:!0,get:function(){return i.FeeMarketEIP1559Transaction}});var s=r(56769);Object.defineProperty(t,"AccessListEIP2930Transaction",{enumerable:!0,get:function(){return s.AccessListEIP2930Transaction}});var n=r(91453);Object.defineProperty(t,"Transaction",{enumerable:!0,get:function(){return n.Transaction}});var c=r(77346);Object.defineProperty(t,"TransactionFactory",{enumerable:!0,get:function(){return c.TransactionFactory}}),a(r(2074),t)},91453:function(e,t,r){"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.Transaction=void 0;let a=r(5507),i=r(92730),s=r(35869),n=r(65652),c=r(2074);function d(e,t){let r=Number(e),o=2*Number(t);return r===o+35||r===o+36}class f extends n.BaseTransaction{constructor(e,t={}){if(super({...e,type:0},t),this.common=this._validateTxV(this.v,t.common),this.gasPrice=(0,i.bufferToBigInt)((0,i.toBuffer)(""===e.gasPrice?"0x":e.gasPrice)),this.gasPrice*this.gasLimit>i.MAX_INTEGER)throw Error(this._errorMsg("gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)"));this._validateCannotExceedMaxInteger({gasPrice:this.gasPrice}),n.BaseTransaction._validateNotArray(e),this.common.gteHardfork("spuriousDragon")&&(this.isSigned()?d(this.v,this.common.chainId())&&this.activeCapabilities.push(c.Capability.EIP155ReplayProtection):this.activeCapabilities.push(c.Capability.EIP155ReplayProtection)),(t?.freeze??!0)&&Object.freeze(this)}static fromTxData(e,t={}){return new f(e,t)}static fromSerializedTx(e,t={}){let r=(0,i.arrToBufArr)(a.RLP.decode(Uint8Array.from(e)));if(!Array.isArray(r))throw Error("Invalid serialized tx input. Must be array");return this.fromValuesArray(r,t)}static fromValuesArray(e,t={}){if(6!==e.length&&9!==e.length)throw Error("Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).");let[r,o,a,s,n,c,d,h,l]=e;return(0,i.validateNoLeadingZeroes)({nonce:r,gasPrice:o,gasLimit:a,value:n,v:d,r:h,s:l}),new f({nonce:r,gasPrice:o,gasLimit:a,to:s,value:n,data:c,v:d,r:h,s:l},t)}raw(){return[(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:o.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data,void 0!==this.v?(0,i.bigIntToUnpaddedBuffer)(this.v):o.from([]),void 0!==this.r?(0,i.bigIntToUnpaddedBuffer)(this.r):o.from([]),void 0!==this.s?(0,i.bigIntToUnpaddedBuffer)(this.s):o.from([])]}serialize(){return o.from(a.RLP.encode((0,i.bufArrToArr)(this.raw())))}_getMessageToSign(){let e=[(0,i.bigIntToUnpaddedBuffer)(this.nonce),(0,i.bigIntToUnpaddedBuffer)(this.gasPrice),(0,i.bigIntToUnpaddedBuffer)(this.gasLimit),void 0!==this.to?this.to.buf:o.from([]),(0,i.bigIntToUnpaddedBuffer)(this.value),this.data];return this.supports(c.Capability.EIP155ReplayProtection)&&(e.push((0,i.bigIntToUnpaddedBuffer)(this.common.chainId())),e.push((0,i.unpadBuffer)((0,i.toBuffer)(0))),e.push((0,i.unpadBuffer)((0,i.toBuffer)(0)))),e}getMessageToSign(e=!0){let t=this._getMessageToSign();return e?o.from((0,s.keccak256)(a.RLP.encode((0,i.bufArrToArr)(t)))):t}getDataFee(){return this.cache.dataFee&&this.cache.dataFee.hardfork===this.common.hardfork()?this.cache.dataFee.value:(Object.isFrozen(this)&&(this.cache.dataFee={value:super.getDataFee(),hardfork:this.common.hardfork()}),super.getDataFee())}getUpfrontCost(){return this.gasLimit*this.gasPrice+this.value}hash(){if(!this.isSigned())throw Error(this._errorMsg("Cannot call hash method if transaction is not signed"));return Object.isFrozen(this)?(this.cache.hash||(this.cache.hash=o.from((0,s.keccak256)(a.RLP.encode((0,i.bufArrToArr)(this.raw()))))),this.cache.hash):o.from((0,s.keccak256)(a.RLP.encode((0,i.bufArrToArr)(this.raw()))))}getMessageToVerifySignature(){if(!this.isSigned())throw Error(this._errorMsg("This transaction is not signed"));let e=this._getMessageToSign();return o.from((0,s.keccak256)(a.RLP.encode((0,i.bufArrToArr)(e))))}getSenderPublicKey(){let e=this.getMessageToVerifySignature(),{v:t,r,s:o}=this;this._validateHighS();try{return(0,i.ecrecover)(e,t,(0,i.bigIntToUnpaddedBuffer)(r),(0,i.bigIntToUnpaddedBuffer)(o),this.supports(c.Capability.EIP155ReplayProtection)?this.common.chainId():void 0)}catch(e){throw Error(this._errorMsg("Invalid Signature"))}}_processSignature(e,t,r){this.supports(c.Capability.EIP155ReplayProtection)&&(e+=this.common.chainId()*BigInt(2)+BigInt(8));let o={...this.txOptions,common:this.common};return f.fromTxData({nonce:this.nonce,gasPrice:this.gasPrice,gasLimit:this.gasLimit,to:this.to,value:this.value,data:this.data,v:e,r:(0,i.bufferToBigInt)(t),s:(0,i.bufferToBigInt)(r)},o)}toJSON(){return{nonce:(0,i.bigIntToHex)(this.nonce),gasPrice:(0,i.bigIntToHex)(this.gasPrice),gasLimit:(0,i.bigIntToHex)(this.gasLimit),to:void 0!==this.to?this.to.toString():void 0,value:(0,i.bigIntToHex)(this.value),data:"0x"+this.data.toString("hex"),v:void 0!==this.v?(0,i.bigIntToHex)(this.v):void 0,r:void 0!==this.r?(0,i.bigIntToHex)(this.r):void 0,s:void 0!==this.s?(0,i.bigIntToHex)(this.s):void 0}}_validateTxV(e,t){let r;let o=void 0!==e?Number(e):void 0;if(void 0!==o&&o<37&&27!==o&&28!==o)throw Error(`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${o}`);if(void 0!==o&&0!==o&&(!t||t.gteHardfork("spuriousDragon"))&&27!==o&&28!==o){if(t){if(!d(BigInt(o),t.chainId()))throw Error(`Incompatible EIP155-based V ${o} and chain id ${t.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`)}else{let e;e=(o-35)%2==0?35:36,r=BigInt(o-e)/BigInt(2)}}return this._getCommon(t,r)}errorStr(){return this._getSharedErrorPostfix()+` gasPrice=${this.gasPrice}`}_errorMsg(e){return`${e} (${this.errorStr()})`}}t.Transaction=f},77346:function(e,t,r){"use strict";var o=r(48764).Buffer;Object.defineProperty(t,"__esModule",{value:!0}),t.TransactionFactory=void 0;let a=r(92730),i=r(37365),s=r(56769),n=r(72346),c=r(91453);class d{constructor(){}static fromTxData(e,t={}){if(!("type"in e)||void 0===e.type)return c.Transaction.fromTxData(e,t);{let r=Number((0,a.bufferToBigInt)((0,a.toBuffer)(e.type)));if(0===r)return c.Transaction.fromTxData(e,t);if(1===r)return s.AccessListEIP2930Transaction.fromTxData(e,t);if(2===r)return i.FeeMarketEIP1559Transaction.fromTxData(e,t);throw Error(`Tx instantiation with type ${r} not supported`)}}static fromSerializedData(e,t={}){if(!(e[0]<=127))return c.Transaction.fromSerializedTx(e,t);switch(e[0]){case 1:return s.AccessListEIP2930Transaction.fromSerializedTx(e,t);case 2:return i.FeeMarketEIP1559Transaction.fromSerializedTx(e,t);default:throw Error(`TypedTransaction with ID ${e[0]} unknown`)}}static fromBlockBodyData(e,t={}){if(o.isBuffer(e))return this.fromSerializedData(e,t);if(Array.isArray(e))return c.Transaction.fromValuesArray(e,t);throw Error("Cannot decode transaction: unknown type input")}static async fromEthersProvider(e,t,r){let o=(0,a.getProvider)(e),i=await (0,a.fetchFromProvider)(o,{method:"eth_getTransactionByHash",params:[t]});if(null===i)throw Error("No data returned from provider");return d.fromRPCTx(i,r)}static async fromRPCTx(e,t={}){return d.fromTxData((0,n.normalizeTxParams)(e),t)}}t.TransactionFactory=d},2074:function(e,t){"use strict";var r;function o(e){return!!(0===e.length||Array.isArray(e[0]))}Object.defineProperty(t,"__esModule",{value:!0}),t.isAccessList=t.isAccessListBuffer=t.Capability=void 0,(r=t.Capability||(t.Capability={}))[r.EIP155ReplayProtection=155]="EIP155ReplayProtection",r[r.EIP1559FeeMarket=1559]="EIP1559FeeMarket",r[r.EIP2718TypedTransaction=2718]="EIP2718TypedTransaction",r[r.EIP2930AccessLists=2930]="EIP2930AccessLists",t.isAccessListBuffer=o,t.isAccessList=function(e){return!o(e)}},9939:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.AccessLists=t.checkMaxInitCodeSize=void 0;let o=r(92730),a=r(2074);t.checkMaxInitCodeSize=function(e,t){let r=e.param("vm","maxInitCodeSize");if(r&&BigInt(t)>r)throw Error(`the initcode size of this transaction is too large: it is ${t} while the max is ${e.param("vm","maxInitCodeSize")}`)};class i{static getAccessListData(e){let t,r;if((0,a.isAccessList)(e)){t=e;let a=[];for(let t=0;t<e.length;t++){let r=e[t],i=(0,o.toBuffer)(r.address),s=[];for(let e=0;e<r.storageKeys.length;e++)s.push((0,o.toBuffer)(r.storageKeys[e]));a.push([i,s])}r=a}else{r=e??[];let a=[];for(let e=0;e<r.length;e++){let t=r[e],i=(0,o.bufferToHex)(t[0]),s=[];for(let e=0;e<t[1].length;e++)s.push((0,o.bufferToHex)(t[1][e]));let n={address:i,storageKeys:s};a.push(n)}t=a}return{AccessListJSON:t,accessList:r}}static verifyAccessList(e){for(let t=0;t<e.length;t++){let r=e[t],o=r[0],a=r[1];if(void 0!==r[2])throw Error("Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.");if(20!==o.length)throw Error("Invalid EIP-2930 transaction: address length should be 20 bytes");for(let e=0;e<a.length;e++)if(32!==a[e].length)throw Error("Invalid EIP-2930 transaction: storage slot length should be 32 bytes")}}static getAccessListJSON(e){let t=[];for(let r=0;r<e.length;r++){let a=e[r],i={address:"0x"+(0,o.setLengthLeft)(a[0],20).toString("hex"),storageKeys:[]},s=a[1];for(let e=0;e<s.length;e++){let t=s[e];i.storageKeys.push("0x"+(0,o.setLengthLeft)(t,32).toString("hex"))}t.push(i)}return t}static getDataFeeEIP2930(e,t){let r=t.param("gasPrices","accessListStorageKeyCost"),o=t.param("gasPrices","accessListAddressCost"),a=0;for(let t=0;t<e.length;t++)a+=e[t][1].length;return e.length*Number(o)+a*Number(r)}}t.AccessLists=i},53754:function(e,t){"use strict";function r(e){if(!Number.isSafeInteger(e)||e<0)throw Error(`positive integer expected, not ${e}`)}function o(e){if("boolean"!=typeof e)throw Error(`boolean expected, not ${e}`)}function a(e){return e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name}function i(e,...t){if(!a(e))throw Error("Uint8Array expected");if(t.length>0&&!t.includes(e.length))throw Error(`Uint8Array expected of length ${t}, not of length=${e.length}`)}function s(e){if("function"!=typeof e||"function"!=typeof e.create)throw Error("Hash should be wrapped by utils.wrapConstructor");r(e.outputLen),r(e.blockLen)}function n(e,t=!0){if(e.destroyed)throw Error("Hash instance has been destroyed");if(t&&e.finished)throw Error("Hash#digest() has already been called")}function c(e,t){i(e);let r=t.outputLen;if(e.length<r)throw Error(`digestInto() expects output buffer of length at least ${r}`)}Object.defineProperty(t,"__esModule",{value:!0}),t.output=t.exists=t.hash=t.bytes=t.bool=t.number=t.isBytes=void 0,t.number=r,t.bool=o,t.isBytes=a,t.bytes=i,t.hash=s,t.exists=n,t.output=c,t.default={number:r,bool:o,bytes:i,hash:s,exists:n,output:c}},41908:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.add5L=t.add5H=t.add4H=t.add4L=t.add3H=t.add3L=t.add=t.rotlBL=t.rotlBH=t.rotlSL=t.rotlSH=t.rotr32L=t.rotr32H=t.rotrBL=t.rotrBH=t.rotrSL=t.rotrSH=t.shrSL=t.shrSH=t.toBig=t.split=t.fromBig=void 0;let r=BigInt(4294967296-1),o=BigInt(32);function a(e,t=!1){return t?{h:Number(e&r),l:Number(e>>o&r)}:{h:0|Number(e>>o&r),l:0|Number(e&r)}}function i(e,t=!1){let r=new Uint32Array(e.length),o=new Uint32Array(e.length);for(let i=0;i<e.length;i++){let{h:s,l:n}=a(e[i],t);[r[i],o[i]]=[s,n]}return[r,o]}t.fromBig=a,t.split=i;let s=(e,t)=>BigInt(e>>>0)<<o|BigInt(t>>>0);t.toBig=s;let n=(e,t,r)=>e>>>r;t.shrSH=n;let c=(e,t,r)=>e<<32-r|t>>>r;t.shrSL=c;let d=(e,t,r)=>e>>>r|t<<32-r;t.rotrSH=d;let f=(e,t,r)=>e<<32-r|t>>>r;t.rotrSL=f;let h=(e,t,r)=>e<<64-r|t>>>r-32;t.rotrBH=h;let l=(e,t,r)=>e>>>r-32|t<<64-r;t.rotrBL=l;let u=(e,t)=>t;t.rotr32H=u;let m=(e,t)=>e;t.rotr32L=m;let p=(e,t,r)=>e<<r|t>>>32-r;t.rotlSH=p;let g=(e,t,r)=>t<<r|e>>>32-r;t.rotlSL=g;let b=(e,t,r)=>t<<r-32|e>>>64-r;t.rotlBH=b;let v=(e,t,r)=>e<<r-32|t>>>64-r;function k(e,t,r,o){let a=(t>>>0)+(o>>>0);return{h:e+r+(a/4294967296|0)|0,l:0|a}}t.rotlBL=v,t.add=k;let y=(e,t,r)=>(e>>>0)+(t>>>0)+(r>>>0);t.add3L=y;let I=(e,t,r,o)=>t+r+o+(e/4294967296|0)|0;t.add3H=I;let E=(e,t,r,o)=>(e>>>0)+(t>>>0)+(r>>>0)+(o>>>0);t.add4L=E;let P=(e,t,r,o,a)=>t+r+o+a+(e/4294967296|0)|0;t.add4H=P;let x=(e,t,r,o,a)=>(e>>>0)+(t>>>0)+(r>>>0)+(o>>>0)+(a>>>0);t.add5L=x;let B=(e,t,r,o,a,i)=>t+r+o+a+i+(e/4294967296|0)|0;t.add5H=B,t.default={fromBig:a,split:i,toBig:s,shrSH:n,shrSL:c,rotrSH:d,rotrSL:f,rotrBH:h,rotrBL:l,rotr32H:u,rotr32L:m,rotlSH:p,rotlSL:g,rotlBH:b,rotlBL:v,add:k,add3L:y,add3H:I,add4L:E,add4H:P,add5H:B,add5L:x}},98561:function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.crypto=void 0,t.crypto="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0},17516:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.shake256=t.shake128=t.keccak_512=t.keccak_384=t.keccak_256=t.keccak_224=t.sha3_512=t.sha3_384=t.sha3_256=t.sha3_224=t.Keccak=t.keccakP=void 0;let o=r(53754),a=r(41908),i=r(99992),s=[],n=[],c=[],d=BigInt(0),f=BigInt(1),h=BigInt(2),l=BigInt(7),u=BigInt(256),m=BigInt(113);for(let e=0,t=f,r=1,o=0;e<24;e++){[r,o]=[o,(2*r+3*o)%5],s.push(2*(5*o+r)),n.push((e+1)*(e+2)/2%64);let a=d;for(let e=0;e<7;e++)(t=(t<<f^(t>>l)*m)%u)&h&&(a^=f<<(f<<BigInt(e))-f);c.push(a)}let[p,g]=(0,a.split)(c,!0),b=(e,t,r)=>r>32?(0,a.rotlBH)(e,t,r):(0,a.rotlSH)(e,t,r),v=(e,t,r)=>r>32?(0,a.rotlBL)(e,t,r):(0,a.rotlSL)(e,t,r);function k(e,t=24){let r=new Uint32Array(10);for(let o=24-t;o<24;o++){for(let t=0;t<10;t++)r[t]=e[t]^e[t+10]^e[t+20]^e[t+30]^e[t+40];for(let t=0;t<10;t+=2){let o=(t+8)%10,a=(t+2)%10,i=r[a],s=r[a+1],n=b(i,s,1)^r[o],c=v(i,s,1)^r[o+1];for(let r=0;r<50;r+=10)e[t+r]^=n,e[t+r+1]^=c}let t=e[2],a=e[3];for(let r=0;r<24;r++){let o=n[r],i=b(t,a,o),c=v(t,a,o),d=s[r];t=e[d],a=e[d+1],e[d]=i,e[d+1]=c}for(let t=0;t<50;t+=10){for(let o=0;o<10;o++)r[o]=e[t+o];for(let o=0;o<10;o++)e[t+o]^=~r[(o+2)%10]&r[(o+4)%10]}e[0]^=p[o],e[1]^=g[o]}r.fill(0)}t.keccakP=k;class y extends i.Hash{constructor(e,t,r,a=!1,s=24){if(super(),this.blockLen=e,this.suffix=t,this.outputLen=r,this.enableXOF=a,this.rounds=s,this.pos=0,this.posOut=0,this.finished=!1,this.destroyed=!1,(0,o.number)(r),0>=this.blockLen||this.blockLen>=200)throw Error("Sha3 supports only keccak-f1600 function");this.state=new Uint8Array(200),this.state32=(0,i.u32)(this.state)}keccak(){i.isLE||(0,i.byteSwap32)(this.state32),k(this.state32,this.rounds),i.isLE||(0,i.byteSwap32)(this.state32),this.posOut=0,this.pos=0}update(e){(0,o.exists)(this);let{blockLen:t,state:r}=this,a=(e=(0,i.toBytes)(e)).length;for(let o=0;o<a;){let i=Math.min(t-this.pos,a-o);for(let t=0;t<i;t++)r[this.pos++]^=e[o++];this.pos===t&&this.keccak()}return this}finish(){if(this.finished)return;this.finished=!0;let{state:e,suffix:t,pos:r,blockLen:o}=this;e[r]^=t,(128&t)!=0&&r===o-1&&this.keccak(),e[o-1]^=128,this.keccak()}writeInto(e){(0,o.exists)(this,!1),(0,o.bytes)(e),this.finish();let t=this.state,{blockLen:r}=this;for(let o=0,a=e.length;o<a;){this.posOut>=r&&this.keccak();let i=Math.min(r-this.posOut,a-o);e.set(t.subarray(this.posOut,this.posOut+i),o),this.posOut+=i,o+=i}return e}xofInto(e){if(!this.enableXOF)throw Error("XOF is not possible for this instance");return this.writeInto(e)}xof(e){return(0,o.number)(e),this.xofInto(new Uint8Array(e))}digestInto(e){if((0,o.output)(e,this),this.finished)throw Error("digest() was already called");return this.writeInto(e),this.destroy(),e}digest(){return this.digestInto(new Uint8Array(this.outputLen))}destroy(){this.destroyed=!0,this.state.fill(0)}_cloneInto(e){let{blockLen:t,suffix:r,outputLen:o,rounds:a,enableXOF:i}=this;return e||(e=new y(t,r,o,i,a)),e.state32.set(this.state32),e.pos=this.pos,e.posOut=this.posOut,e.finished=this.finished,e.rounds=a,e.suffix=r,e.outputLen=o,e.enableXOF=i,e.destroyed=this.destroyed,e}}t.Keccak=y;let I=(e,t,r)=>(0,i.wrapConstructor)(()=>new y(t,e,r));t.sha3_224=I(6,144,28),t.sha3_256=I(6,136,32),t.sha3_384=I(6,104,48),t.sha3_512=I(6,72,64),t.keccak_224=I(1,144,28),t.keccak_256=I(1,136,32),t.keccak_384=I(1,104,48),t.keccak_512=I(1,72,64);let E=(e,t,r)=>(0,i.wrapXOFConstructorWithOpts)((o={})=>new y(t,e,void 0===o.dkLen?r:o.dkLen,!0));t.shake128=E(31,168,16),t.shake256=E(31,136,32)},99992:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.randomBytes=t.wrapXOFConstructorWithOpts=t.wrapConstructorWithOpts=t.wrapConstructor=t.checkOpts=t.Hash=t.concatBytes=t.toBytes=t.utf8ToBytes=t.asyncLoop=t.nextTick=t.hexToBytes=t.bytesToHex=t.byteSwap32=t.byteSwapIfBE=t.byteSwap=t.isLE=t.rotl=t.rotr=t.createView=t.u32=t.u8=t.isBytes=void 0;let o=r(98561),a=r(53754);t.isBytes=function(e){return e instanceof Uint8Array||null!=e&&"object"==typeof e&&"Uint8Array"===e.constructor.name},t.u8=e=>new Uint8Array(e.buffer,e.byteOffset,e.byteLength),t.u32=e=>new Uint32Array(e.buffer,e.byteOffset,Math.floor(e.byteLength/4)),t.createView=e=>new DataView(e.buffer,e.byteOffset,e.byteLength),t.rotr=(e,t)=>e<<32-t|e>>>t,t.rotl=(e,t)=>e<<t|e>>>32-t>>>0,t.isLE=68===new Uint8Array(new Uint32Array([287454020]).buffer)[0],t.byteSwap=e=>e<<24&4278190080|e<<8&16711680|e>>>8&65280|e>>>24&255,t.byteSwapIfBE=t.isLE?e=>e:e=>(0,t.byteSwap)(e),t.byteSwap32=function(e){for(let r=0;r<e.length;r++)e[r]=(0,t.byteSwap)(e[r])};let i=Array.from({length:256},(e,t)=>t.toString(16).padStart(2,"0"));t.bytesToHex=function(e){(0,a.bytes)(e);let t="";for(let r=0;r<e.length;r++)t+=i[e[r]];return t};let s={_0:48,_9:57,_A:65,_F:70,_a:97,_f:102};function n(e){return e>=s._0&&e<=s._9?e-s._0:e>=s._A&&e<=s._F?e-(s._A-10):e>=s._a&&e<=s._f?e-(s._a-10):void 0}t.hexToBytes=function(e){if("string"!=typeof e)throw Error("hex string expected, got "+typeof e);let t=e.length,r=t/2;if(t%2)throw Error("padded hex string expected, got unpadded hex of length "+t);let o=new Uint8Array(r);for(let t=0,a=0;t<r;t++,a+=2){let r=n(e.charCodeAt(a)),i=n(e.charCodeAt(a+1));if(void 0===r||void 0===i)throw Error('hex string expected, got non-hex character "'+(e[a]+e[a+1])+'" at index '+a);o[t]=16*r+i}return o};let c=async()=>{};async function d(e,r,o){let a=Date.now();for(let i=0;i<e;i++){o(i);let e=Date.now()-a;e>=0&&e<r||(await (0,t.nextTick)(),a+=e)}}function f(e){if("string"!=typeof e)throw Error(`utf8ToBytes expected string, got ${typeof e}`);return new Uint8Array(new TextEncoder().encode(e))}function h(e){return"string"==typeof e&&(e=f(e)),(0,a.bytes)(e),e}t.nextTick=c,t.asyncLoop=d,t.utf8ToBytes=f,t.toBytes=h,t.concatBytes=function(...e){let t=0;for(let r=0;r<e.length;r++){let o=e[r];(0,a.bytes)(o),t+=o.length}let r=new Uint8Array(t);for(let t=0,o=0;t<e.length;t++){let a=e[t];r.set(a,o),o+=a.length}return r};class l{clone(){return this._cloneInto()}}t.Hash=l;let u={}.toString;t.checkOpts=function(e,t){if(void 0!==t&&"[object Object]"!==u.call(t))throw Error("Options should be object or undefined");return Object.assign(e,t)},t.wrapConstructor=function(e){let t=t=>e().update(h(t)).digest(),r=e();return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=()=>e(),t},t.wrapConstructorWithOpts=function(e){let t=(t,r)=>e(r).update(h(t)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=t=>e(t),t},t.wrapXOFConstructorWithOpts=function(e){let t=(t,r)=>e(r).update(h(t)).digest(),r=e({});return t.outputLen=r.outputLen,t.blockLen=r.blockLen,t.create=t=>e(t),t},t.randomBytes=function(e=32){if(o.crypto&&"function"==typeof o.crypto.getRandomValues)return o.crypto.getRandomValues(new Uint8Array(e));throw Error("crypto.getRandomValues must be defined")}},35869:function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.keccak512=t.keccak384=t.keccak256=t.keccak224=void 0;let o=r(17516),a=r(38221);t.keccak224=(0,a.wrapHash)(o.keccak_224),t.keccak256=(()=>{let e=(0,a.wrapHash)(o.keccak_256);return e.create=o.keccak_256.create,e})(),t.keccak384=(0,a.wrapHash)(o.keccak_384),t.keccak512=(0,a.wrapHash)(o.keccak_512)},38221:function(e,t,r){"use strict";e=r.nmd(e);var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.crypto=t.utf8ToBytes=t.createView=t.concatBytes=t.toHex=t.bytesToHex=t.assertBytes=t.assertBool=void 0,t.bytesToUtf8=function(e){if(!(e instanceof Uint8Array))throw TypeError(`bytesToUtf8 expected Uint8Array, got ${typeof e}`);return new TextDecoder().decode(e)},t.hexToBytes=function(e){let t=e.startsWith("0x")?e.substring(2):e;return(0,i.hexToBytes)(t)},t.equalsBytes=function(e,t){if(e.length!==t.length)return!1;for(let r=0;r<e.length;r++)if(e[r]!==t[r])return!1;return!0},t.wrapHash=function(e){return t=>(a.default.bytes(t),e(t))};let a=o(r(53754)),i=r(99992),s=a.default.bool;t.assertBool=s;let n=a.default.bytes;t.assertBytes=n;var c=r(99992);Object.defineProperty(t,"bytesToHex",{enumerable:!0,get:function(){return c.bytesToHex}}),Object.defineProperty(t,"toHex",{enumerable:!0,get:function(){return c.bytesToHex}}),Object.defineProperty(t,"concatBytes",{enumerable:!0,get:function(){return c.concatBytes}}),Object.defineProperty(t,"createView",{enumerable:!0,get:function(){return c.createView}}),Object.defineProperty(t,"utf8ToBytes",{enumerable:!0,get:function(){return c.utf8ToBytes}}),t.crypto=(()=>{let t="object"==typeof globalThis&&"crypto"in globalThis?globalThis.crypto:void 0,r="function"==typeof e.require&&e.require.bind(e);return{node:r&&!t?r("crypto"):void 0,web:t}})()},34606:function(e,t){var r;r=function(e){e.version="1.2.2";var t=function(){for(var e=0,t=Array(256),r=0;256!=r;++r)e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=1&(e=r)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1)?-306674912^e>>>1:e>>>1,t[r]=e;return"undefined"!=typeof Int32Array?new Int32Array(t):t}(),r=function(e){var t=0,r=0,o=0,a="undefined"!=typeof Int32Array?new Int32Array(4096):Array(4096);for(o=0;256!=o;++o)a[o]=e[o];for(o=0;256!=o;++o)for(r=e[o],t=256+o;t<4096;t+=256)r=a[t]=r>>>8^e[255&r];var i=[];for(o=1;16!=o;++o)i[o-1]="undefined"!=typeof Int32Array?a.subarray(256*o,256*o+256):a.slice(256*o,256*o+256);return i}(t),o=r[0],a=r[1],i=r[2],s=r[3],n=r[4],c=r[5],d=r[6],f=r[7],h=r[8],l=r[9],u=r[10],m=r[11],p=r[12],g=r[13],b=r[14];e.table=t,e.bstr=function(e,r){for(var o=-1^r,a=0,i=e.length;a<i;)o=o>>>8^t[(o^e.charCodeAt(a++))&255];return~o},e.buf=function(e,r){for(var v=-1^r,k=e.length-15,y=0;y<k;)v=b[e[y++]^255&v]^g[e[y++]^v>>8&255]^p[e[y++]^v>>16&255]^m[e[y++]^v>>>24]^u[e[y++]]^l[e[y++]]^h[e[y++]]^f[e[y++]]^d[e[y++]]^c[e[y++]]^n[e[y++]]^s[e[y++]]^i[e[y++]]^a[e[y++]]^o[e[y++]]^t[e[y++]];for(k+=15;y<k;)v=v>>>8^t[(v^e[y++])&255];return~v},e.str=function(e,r){for(var o=-1^r,a=0,i=e.length,s=0,n=0;a<i;)(s=e.charCodeAt(a++))<128?o=o>>>8^t[(o^s)&255]:s<2048?o=(o=o>>>8^t[(o^(192|s>>6&31))&255])>>>8^t[(o^(128|63&s))&255]:s>=55296&&s<57344?(s=(1023&s)+64,n=1023&e.charCodeAt(a++),o=(o=(o=(o=o>>>8^t[(o^(240|s>>8&7))&255])>>>8^t[(o^(128|s>>2&63))&255])>>>8^t[(o^(128|n>>6&15|(3&s)<<4))&255])>>>8^t[(o^(128|63&n))&255]):o=(o=(o=o>>>8^t[(o^(224|s>>12&15))&255])>>>8^t[(o^(128|s>>6&63))&255])>>>8^t[(o^(128|63&s))&255];return~o}},"undefined"==typeof DO_NOT_EXPORT_CRC?r(t):r({})},47295:function(e){"use strict";e.exports=JSON.parse('{"name":"goerli","chainId":5,"networkId":5,"defaultHardfork":"merge","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"Cross-client PoA test network","url":"https://github.com/goerli/testnet","genesis":{"timestamp":"0x5c51a607","gasLimit":10485760,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x22466c6578692069732061207468696e6722202d204166726900000000000000e0a2bd4258d2768837baa26a28fe71dc079f84c70000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xa3f5ab08"},{"name":"homestead","block":0,"forkHash":"0xa3f5ab08"},{"name":"tangerineWhistle","block":0,"forkHash":"0xa3f5ab08"},{"name":"spuriousDragon","block":0,"forkHash":"0xa3f5ab08"},{"name":"byzantium","block":0,"forkHash":"0xa3f5ab08"},{"name":"constantinople","block":0,"forkHash":"0xa3f5ab08"},{"name":"petersburg","block":0,"forkHash":"0xa3f5ab08"},{"name":"istanbul","block":1561651,"forkHash":"0xc25efa5c"},{"name":"berlin","block":4460644,"forkHash":"0x757a1c47"},{"name":"london","block":5062605,"forkHash":"0xb8c6299d"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://goerli.etherscan.io/block/7382818","name":"merge","ttd":"10790000","block":7382819,"forkHash":"0xb8c6299d"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"timestamp":"1678832736","forkHash":"0xf9843abf"}],"bootstrapNodes":[{"ip":"51.141.78.53","port":30303,"id":"011f758e6552d105183b1761c5e2dea0111bc20fd5f6422bc7f91e0fabbec9a6595caf6239b37feb773dddd3f87240d99d859431891e4a642cf2a0a9e6cbb98a","location":"","comment":"Upstream bootnode 1"},{"ip":"13.93.54.137","port":30303,"id":"176b9417f511d05b6b2cf3e34b756cf0a7096b3094572a8f6ef4cdcb9d1f9d00683bf0f83347eebdf3b81c3521c2332086d9592802230bf528eaf606a1d9677b","location":"","comment":"Upstream bootnode 2"},{"ip":"94.237.54.114","port":30313,"id":"46add44b9f13965f7b9875ac6b85f016f341012d84f975377573800a863526f4da19ae2c620ec73d11591fa9510e992ecc03ad0751f53cc02f7c7ed6d55c7291","location":"","comment":"Upstream bootnode 3"},{"ip":"18.218.250.66","port":30313,"id":"b5948a2d3e9d486c4d75bf32713221c2bd6cf86463302339299bd227dc2e276cd5a1c7ca4f43a0e9122fe9af884efed563bd2a1fd28661f3b5f5ad7bf1de5949","location":"","comment":"Upstream bootnode 4"},{"ip":"3.11.147.67","port":30303,"id":"a61215641fb8714a373c80edbfa0ea8878243193f57c96eeb44d0bc019ef295abd4e044fd619bfc4c59731a73fb79afe84e9ab6da0c743ceb479cbb6d263fa91","location":"","comment":"Ethereum Foundation bootnode"},{"ip":"51.15.116.226","port":30303,"id":"a869b02cec167211fb4815a82941db2e7ed2936fd90e78619c53eb17753fcf0207463e3419c264e2a1dd8786de0df7e68cf99571ab8aeb7c4e51367ef186b1dd","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":30303,"id":"807b37ee4816ecf407e9112224494b74dd5933625f655962d892f2f0f02d7fbbb3e2a94cf87a96609526f30c998fd71e93e2f53015c558ffc8b03eceaf30ee33","location":"","comment":"Goerli Initiative bootnode"},{"ip":"51.15.119.157","port":40303,"id":"a59e33ccd2b3e52d578f1fbd70c6f9babda2650f0760d6ff3b37742fdcdfdb3defba5d56d315b40c46b70198c7621e63ffa3f987389c7118634b0fefbbdfa7fd","location":"","comment":"Goerli Initiative bootnode"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.goerli.ethdisco.net"]}')},43323:function(e){"use strict";e.exports=JSON.parse('{"name":"mainnet","chainId":1,"networkId":1,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"The Ethereum main chain","url":"https://ethstats.net/","genesis":{"gasLimit":5000,"difficulty":17179869184,"nonce":"0x0000000000000042","extraData":"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfc64ec04"},{"name":"homestead","block":1150000,"forkHash":"0x97c2c34c"},{"name":"dao","block":1920000,"forkHash":"0x91d1f948"},{"name":"tangerineWhistle","block":2463000,"forkHash":"0x7a64da13"},{"name":"spuriousDragon","block":2675000,"forkHash":"0x3edd5b10"},{"name":"byzantium","block":4370000,"forkHash":"0xa00bc324"},{"name":"constantinople","block":7280000,"forkHash":"0x668db0af"},{"name":"petersburg","block":7280000,"forkHash":"0x668db0af"},{"name":"istanbul","block":9069000,"forkHash":"0x879d6e30"},{"name":"muirGlacier","block":9200000,"forkHash":"0xe029e991"},{"name":"berlin","block":12244000,"forkHash":"0x0eb440f6"},{"name":"london","block":12965000,"forkHash":"0xb715077d"},{"name":"arrowGlacier","block":13773000,"forkHash":"0x20c327fc"},{"name":"grayGlacier","block":15050000,"forkHash":"0xf0afd0e3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://etherscan.io/block/15537393","name":"merge","ttd":"58750000000000000000000","block":15537394,"forkHash":"0xf0afd0e3"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"timestamp":"1681338455","forkHash":"0xdce96c2d"}],"bootstrapNodes":[{"ip":"18.138.108.67","port":30303,"id":"d860a01f9722d78051619d1e2351aba3f43f943f6f00718d1b9baa4101932a1f5011f16bb2b1bb35db20d6fe28fa0bf09636d26a87d31de9ec6203eeedb1f666","location":"ap-southeast-1-001","comment":"bootnode-aws-ap-southeast-1-001"},{"ip":"3.209.45.79","port":30303,"id":"22a8232c3abc76a16ae9d6c3b164f98775fe226f0917b0ca871128a74a8e9630b458460865bab457221f1d448dd9791d24c4e5d88786180ac185df813a68d4de","location":"us-east-1-001","comment":"bootnode-aws-us-east-1-001"},{"ip":"65.108.70.101","port":30303,"id":"2b252ab6a1d0f971d9722cb839a42cb81db019ba44c08754628ab4a823487071b5695317c8ccd085219c3a03af063495b2f1da8d18218da2d6a82981b45e6ffc","location":"eu-west-1-001","comment":"bootnode-hetzner-hel"},{"ip":"157.90.35.166","port":30303,"id":"4aeb4ab6c14b23e2c4cfdce879c04b0748a20d8e9b59e25ded2a08143e265c6c25936e74cbc8e641e3312ca288673d91f2f93f8e277de3cfa444ecdaaf982052","location":"eu-central-1-001","comment":"bootnode-hetzner-fsn"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.mainnet.ethdisco.net"]}')},36987:function(e){"use strict";e.exports=JSON.parse('{"name":"rinkeby","chainId":4,"networkId":4,"defaultHardfork":"london","consensus":{"type":"poa","algorithm":"clique","clique":{"period":15,"epoch":30000}},"comment":"PoA test network","url":"https://www.rinkeby.io","genesis":{"timestamp":"0x58ee40ba","gasLimit":4700000,"difficulty":1,"nonce":"0x0000000000000000","extraData":"0x52657370656374206d7920617574686f7269746168207e452e436172746d616e42eb768f2244c8811c63729a21a3569731535f067ffc57839b00206d1ad20c69a1981b489f772031b279182d99e65703f0076e4812653aab85fca0f00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x3b8e0691"},{"name":"homestead","block":1,"forkHash":"0x60949295"},{"name":"tangerineWhistle","block":2,"forkHash":"0x8bde40dd"},{"name":"spuriousDragon","block":3,"forkHash":"0xcb3a64bb"},{"name":"byzantium","block":1035301,"forkHash":"0x8d748b57"},{"name":"constantinople","block":3660663,"forkHash":"0xe49cab14"},{"name":"petersburg","block":4321234,"forkHash":"0xafec6b27"},{"name":"istanbul","block":5435345,"forkHash":"0xcbdb8838"},{"name":"berlin","block":8290928,"forkHash":"0x6910c8bd"},{"name":"london","block":8897988,"forkHash":"0x8e29f2f3"},{"name":"merge","block":null,"forkHash":null},{"name":"shanghai","block":null,"forkHash":null}],"bootstrapNodes":[{"ip":"52.169.42.101","port":30303,"id":"a24ac7c5484ef4ed0c5eb2d36620ba4e4aa13b8c84684e1b4aab0cebea2ae45cb4d375b77eab56516d34bfbd3c1a833fc51296ff084b770b94fb9028c4d25ccf","location":"","comment":"IE"},{"ip":"52.3.158.184","port":30303,"id":"343149e4feefa15d882d9fe4ac7d88f885bd05ebb735e547f12e12080a9fa07c8014ca6fd7f373123488102fe5e34111f8509cf0b7de3f5b44339c9f25e87cb8","location":"","comment":"INFURA"},{"ip":"159.89.28.211","port":30303,"id":"b6b28890b006743680c52e64e0d16db57f28124885595fa03a562be1d2bf0f3a1da297d56b13da25fb992888fd556d4c1a27b1f39d531bde7de1921c90061cc6","location":"","comment":"AKASHA"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.rinkeby.ethdisco.net"]}')},52823:function(e){"use strict";e.exports=JSON.parse('{"name":"ropsten","chainId":3,"networkId":3,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network","url":"https://github.com/ethereum/ropsten","genesis":{"gasLimit":16777216,"difficulty":1048576,"nonce":"0x0000000000000042","extraData":"0x3535353535353535353535353535353535353535353535353535353535353535"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0x30c7ddbc"},{"name":"homestead","block":0,"forkHash":"0x30c7ddbc"},{"name":"tangerineWhistle","block":0,"forkHash":"0x30c7ddbc"},{"name":"spuriousDragon","block":10,"forkHash":"0x63760190"},{"name":"byzantium","block":1700000,"forkHash":"0x3ea159c7"},{"name":"constantinople","block":4230000,"forkHash":"0x97b544f3"},{"name":"petersburg","block":4939394,"forkHash":"0xd6e2149b"},{"name":"istanbul","block":6485846,"forkHash":"0x4bc66396"},{"name":"muirGlacier","block":7117117,"forkHash":"0x6727ef90"},{"name":"berlin","block":9812189,"forkHash":"0xa157d377"},{"name":"london","block":10499401,"forkHash":"0x7119b6b3"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge","name":"merge","ttd":"50000000000000000","block":null,"forkHash":"0x7119b6b3"},{"name":"mergeForkIdTransition","block":null,"forkHash":null},{"name":"shanghai","block":null,"forkHash":null}],"bootstrapNodes":[{"ip":"52.176.7.10","port":30303,"id":"30b7ab30a01c124a6cceca36863ece12c4f5fa68e3ba9b0b51407ccc002eeed3b3102d20a88f1c1d3c3154e2449317b8ef95090e77b312d5cc39354f86d5d606","location":"","comment":"US-Azure geth"},{"ip":"52.176.100.77","port":30303,"id":"865a63255b3bb68023b6bffd5095118fcc13e79dcf014fe4e47e065c350c7cc72af2e53eff895f11ba1bbb6a2b33271c1116ee870f266618eadfc2e78aa7349c","location":"","comment":"US-Azure parity"},{"ip":"52.232.243.152","port":30303,"id":"6332792c4a00e3e4ee0926ed89e0d27ef985424d97b6a45bf0f23e51f0dcb5e66b875777506458aea7af6f9e4ffb69f43f3778ee73c81ed9d34c51c4b16b0b0f","location":"","comment":"Parity"},{"ip":"192.81.208.223","port":30303,"id":"94c15d1b9e2fe7ce56e458b9a3b672ef11894ddedd0c6f247e0f1d3487f52b66208fb4aeb8179fce6e3a749ea93ed147c37976d67af557508d199d9594c35f09","location":"","comment":"@gpip"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.ropsten.ethdisco.net"]}')},75810:function(e){"use strict";e.exports=JSON.parse('{"name":"sepolia","chainId":11155111,"networkId":11155111,"defaultHardfork":"merge","consensus":{"type":"pow","algorithm":"ethash","ethash":{}},"comment":"PoW test network to replace Ropsten","url":"https://github.com/ethereum/go-ethereum/pull/23730","genesis":{"timestamp":"0x6159af19","gasLimit":30000000,"difficulty":131072,"nonce":"0x0000000000000000","extraData":"0x5365706f6c69612c20417468656e732c204174746963612c2047726565636521"},"hardforks":[{"name":"chainstart","block":0,"forkHash":"0xfe3366e7"},{"name":"homestead","block":0,"forkHash":"0xfe3366e7"},{"name":"tangerineWhistle","block":0,"forkHash":"0xfe3366e7"},{"name":"spuriousDragon","block":0,"forkHash":"0xfe3366e7"},{"name":"byzantium","block":0,"forkHash":"0xfe3366e7"},{"name":"constantinople","block":0,"forkHash":"0xfe3366e7"},{"name":"petersburg","block":0,"forkHash":"0xfe3366e7"},{"name":"istanbul","block":0,"forkHash":"0xfe3366e7"},{"name":"muirGlacier","block":0,"forkHash":"0xfe3366e7"},{"name":"berlin","block":0,"forkHash":"0xfe3366e7"},{"name":"london","block":0,"forkHash":"0xfe3366e7"},{"//_comment":"The forkHash will remain same as mergeForkIdTransition is post merge, terminal block: https://sepolia.etherscan.io/block/1450408","name":"merge","ttd":"17000000000000000","block":1450409,"forkHash":"0xfe3366e7"},{"name":"mergeForkIdTransition","block":1735371,"forkHash":"0xb96cbd13"},{"name":"shanghai","block":null,"timestamp":"1677557088","forkHash":"0xf7f9bc08"}],"bootstrapNodes":[{"ip":"18.168.182.86","port":30303,"id":"9246d00bc8fd1742e5ad2428b80fc4dc45d786283e05ef6edbd9002cbc335d40998444732fbe921cb88e1d2c73d1b1de53bae6a2237996e9bfe14f871baf7066","location":"","comment":"geth"},{"ip":"52.14.151.177","port":30303,"id":"ec66ddcf1a974950bd4c782789a7e04f8aa7110a72569b6e65fcd51e937e74eed303b1ea734e4d19cfaec9fbff9b6ee65bf31dcb50ba79acce9dd63a6aca61c7","location":"","comment":"besu"},{"ip":"165.22.196.173","port":30303,"id":"ce970ad2e9daa9e14593de84a8b49da3d54ccfdf83cbc4fe519cb8b36b5918ed4eab087dedd4a62479b8d50756b492d5f762367c8d20329a7854ec01547568a6","location":"","comment":"EF"},{"ip":"65.108.95.67","port":30303,"id":"075503b13ed736244896efcde2a992ec0b451357d46cb7a8132c0384721742597fc8f0d91bbb40bb52e7d6e66728d36a1fda09176294e4a30cfac55dcce26bc6","location":"","comment":"lodestar"}],"dnsNetworks":["enrtree://AKA3AM6LPBYEUDMVNU3BSVQJ5AD45Y7YPOHJLEF6W26QOE4VTUDPE@all.sepolia.ethdisco.net"]}')},64104:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-1153","number":1153,"comment":"Transient Storage","url":"https://eips.ethereum.org/EIPS/eip-1153","status":"Review","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{"tstore":{"v":100,"d":"Base fee of the TSTORE opcode"},"tload":{"v":100,"d":"Base fee of the TLOAD opcode"}},"vm":{},"pow":{}}')},41187:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-1559","number":1559,"comment":"Fee market change for ETH 1.0 chain","url":"https://eips.ethereum.org/EIPS/eip-1559","status":"Final","minimumHardfork":"berlin","requiredEIPs":[2930],"gasConfig":{"baseFeeMaxChangeDenominator":{"v":8,"d":"Maximum base fee change denominator"},"elasticityMultiplier":{"v":2,"d":"Maximum block gas target elasticity"},"initialBaseFee":{"v":1000000000,"d":"Initial base fee on first EIP1559 block"}},"gasPrices":{},"vm":{},"pow":{}}')},22643:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-2315","number":2315,"comment":"Simple subroutines for the EVM","url":"https://eips.ethereum.org/EIPS/eip-2315","status":"Draft","minimumHardfork":"istanbul","gasConfig":{},"gasPrices":{"beginsub":{"v":2,"d":"Base fee of the BEGINSUB opcode"},"returnsub":{"v":5,"d":"Base fee of the RETURNSUB opcode"},"jumpsub":{"v":10,"d":"Base fee of the JUMPSUB opcode"}},"vm":{},"pow":{}}')},77158:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-2537","number":2537,"comment":"BLS12-381 precompiles","url":"https://eips.ethereum.org/EIPS/eip-2537","status":"Draft","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"Bls12381G1AddGas":{"v":600,"d":"Gas cost of a single BLS12-381 G1 addition precompile-call"},"Bls12381G1MulGas":{"v":12000,"d":"Gas cost of a single BLS12-381 G1 multiplication precompile-call"},"Bls12381G2AddGas":{"v":4500,"d":"Gas cost of a single BLS12-381 G2 addition precompile-call"},"Bls12381G2MulGas":{"v":55000,"d":"Gas cost of a single BLS12-381 G2 multiplication precompile-call"},"Bls12381PairingBaseGas":{"v":115000,"d":"Base gas cost of BLS12-381 pairing check"},"Bls12381PairingPerPairGas":{"v":23000,"d":"Per-pair gas cost of BLS12-381 pairing check"},"Bls12381MapG1Gas":{"v":5500,"d":"Gas cost of BLS12-381 map field element to G1"},"Bls12381MapG2Gas":{"v":110000,"d":"Gas cost of BLS12-381 map field element to G2"},"Bls12381MultiExpGasDiscount":{"v":[[1,1200],[2,888],[3,764],[4,641],[5,594],[6,547],[7,500],[8,453],[9,438],[10,423],[11,408],[12,394],[13,379],[14,364],[15,349],[16,334],[17,330],[18,326],[19,322],[20,318],[21,314],[22,310],[23,306],[24,302],[25,298],[26,294],[27,289],[28,285],[29,281],[30,277],[31,273],[32,269],[33,268],[34,266],[35,265],[36,263],[37,262],[38,260],[39,259],[40,257],[41,256],[42,254],[43,253],[44,251],[45,250],[46,248],[47,247],[48,245],[49,244],[50,242],[51,241],[52,239],[53,238],[54,236],[55,235],[56,233],[57,232],[58,231],[59,229],[60,228],[61,226],[62,225],[63,223],[64,222],[65,221],[66,220],[67,219],[68,219],[69,218],[70,217],[71,216],[72,216],[73,215],[74,214],[75,213],[76,213],[77,212],[78,211],[79,211],[80,210],[81,209],[82,208],[83,208],[84,207],[85,206],[86,205],[87,205],[88,204],[89,203],[90,202],[91,202],[92,201],[93,200],[94,199],[95,199],[96,198],[97,197],[98,196],[99,196],[100,195],[101,194],[102,193],[103,193],[104,192],[105,191],[106,191],[107,190],[108,189],[109,188],[110,188],[111,187],[112,186],[113,185],[114,185],[115,184],[116,183],[117,182],[118,182],[119,181],[120,180],[121,179],[122,179],[123,178],[124,177],[125,176],[126,176],[127,175],[128,174]],"d":"Discount gas costs of calls to the MultiExp precompiles with `k` (point, scalar) pair"}},"vm":{},"pow":{}}')},8499:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-2565","number":2565,"comment":"ModExp gas cost","url":"https://eips.ethereum.org/EIPS/eip-2565","status":"Final","minimumHardfork":"byzantium","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":3,"d":"Gquaddivisor from modexp precompile for gas calculation"}},"vm":{},"pow":{}}')},76796:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-2718","comment":"Typed Transaction Envelope","url":"https://eips.ethereum.org/EIPS/eip-2718","status":"Final","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},18345:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-2929","comment":"Gas cost increases for state access opcodes","url":"https://eips.ethereum.org/EIPS/eip-2929","status":"Final","minimumHardfork":"chainstart","gasConfig":{},"gasPrices":{"coldsload":{"v":2100,"d":"Gas cost of the first read of storage from a given location (per transaction)"},"coldaccountaccess":{"v":2600,"d":"Gas cost of the first read of a given address (per transaction)"},"warmstorageread":{"v":100,"d":"Gas cost of reading storage locations which have already loaded \'cold\'"},"sstoreCleanGasEIP2200":{"v":2900,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreNoopGasEIP2200":{"v":100,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":100,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitRefundEIP2200":{"v":19900,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanRefundEIP2200":{"v":4900,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"call":{"v":0,"d":"Base fee of the CALL opcode"},"callcode":{"v":0,"d":"Base fee of the CALLCODE opcode"},"delegatecall":{"v":0,"d":"Base fee of the DELEGATECALL opcode"},"staticcall":{"v":0,"d":"Base fee of the STATICCALL opcode"},"balance":{"v":0,"d":"Base fee of the BALANCE opcode"},"extcodesize":{"v":0,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":0,"d":"Base fee of the EXTCODECOPY opcode"},"extcodehash":{"v":0,"d":"Base fee of the EXTCODEHASH opcode"},"sload":{"v":0,"d":"Base fee of the SLOAD opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"}},"vm":{},"pow":{}}')},18185:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-2930","comment":"Optional access lists","url":"https://eips.ethereum.org/EIPS/eip-2930","status":"Final","minimumHardfork":"istanbul","requiredEIPs":[2718,2929],"gasConfig":{},"gasPrices":{"accessListStorageKeyCost":{"v":1900,"d":"Gas cost per storage key in an Access List transaction"},"accessListAddressCost":{"v":2400,"d":"Gas cost per storage key in an Access List transaction"}},"vm":{},"pow":{}}')},98034:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3074","number":3074,"comment":"AUTH and AUTHCALL opcodes","url":"https://eips.ethereum.org/EIPS/eip-3074","status":"Review","minimumHardfork":"london","gasConfig":{},"gasPrices":{"auth":{"v":3100,"d":"Gas cost of the AUTH opcode"},"authcall":{"v":0,"d":"Gas cost of the AUTHCALL opcode"},"authcallValueTransfer":{"v":6700,"d":"Paid for CALL when the value transfer is non-zero"}},"vm":{},"pow":{}}')},40445:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3198","number":3198,"comment":"BASEFEE opcode","url":"https://eips.ethereum.org/EIPS/eip-3198","status":"Final","minimumHardfork":"london","gasConfig":{},"gasPrices":{"basefee":{"v":2,"d":"Gas cost of the BASEFEE opcode"}},"vm":{},"pow":{}}')},16102:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3529","comment":"Reduction in refunds","url":"https://eips.ethereum.org/EIPS/eip-3529","status":"Final","minimumHardfork":"berlin","requiredEIPs":[2929],"gasConfig":{"maxRefundQuotient":{"v":5,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"selfdestructRefund":{"v":0,"d":"Refunded following a selfdestruct operation"},"sstoreClearRefundEIP2200":{"v":4800,"d":"Once per SSTORE operation for clearing an originally existing storage slot"}},"vm":{},"pow":{}}')},1800:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3540","number":3540,"comment":"EVM Object Format (EOF) v1","url":"https://eips.ethereum.org/EIPS/eip-3540","status":"Review","minimumHardfork":"london","requiredEIPs":[3541],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},22867:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3541","comment":"Reject new contracts starting with the 0xEF byte","url":"https://eips.ethereum.org/EIPS/eip-3541","status":"Final","minimumHardfork":"berlin","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},98691:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3554","comment":"Reduction in refunds","url":"Difficulty Bomb Delay to December 1st 2021","status":"Final","minimumHardfork":"muirGlacier","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9500000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},74519:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3607","number":3607,"comment":"Reject transactions from senders with deployed code","url":"https://eips.ethereum.org/EIPS/eip-3607","status":"Final","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},37459:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3651","number":3198,"comment":"Warm COINBASE","url":"https://eips.ethereum.org/EIPS/eip-3651","status":"Review","minimumHardfork":"london","requiredEIPs":[2929],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},6810:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3670","number":3670,"comment":"EOF - Code Validation","url":"https://eips.ethereum.org/EIPS/eip-3670","status":"Review","minimumHardfork":"london","requiredEIPs":[3540],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},21794:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3675","number":3675,"comment":"Upgrade consensus to Proof-of-Stake","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Final","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},27749:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3855","number":3855,"comment":"PUSH0 instruction","url":"https://eips.ethereum.org/EIPS/eip-3855","status":"Review","minimumHardfork":"chainstart","requiredEIPs":[],"gasConfig":{},"gasPrices":{"push0":{"v":2,"d":"Base fee of the PUSH0 opcode"}},"vm":{},"pow":{}}')},99063:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-3860","number":3860,"comment":"Limit and meter initcode","url":"https://eips.ethereum.org/EIPS/eip-3860","status":"Review","minimumHardfork":"spuriousDragon","requiredEIPs":[],"gasConfig":{},"gasPrices":{"initCodeWordCost":{"v":2,"d":"Gas to pay for each word (32 bytes) of initcode when creating a contract"}},"vm":{"maxInitCodeSize":{"v":49152,"d":"Maximum length of initialization code when creating a contract"}},"pow":{}}')},47113:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-4345","number":4345,"comment":"Difficulty Bomb Delay to June 2022","url":"https://eips.ethereum.org/EIPS/eip-4345","status":"Final","minimumHardfork":"london","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":10700000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},59602:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-4399","number":4399,"comment":"Supplant DIFFICULTY opcode with PREVRANDAO","url":"https://eips.ethereum.org/EIPS/eip-4399","status":"Review","minimumHardfork":"london","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},4240:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-4844","number":4844,"comment":"Shard Blob Transactions","url":"https://eips.ethereum.org/EIPS/eip-4844","status":"Draft","minimumHardfork":"merge","requiredEIPs":[1559,2718,2930,4895],"gasConfig":{"dataGasPerBlob":{"v":131072,"d":"The base fee for data gas per blob"},"targetDataGasPerBlock":{"v":262144,"d":"The target data gas consumed per block"},"maxDataGasPerBlock":{"v":524288,"d":"The max data gas allowable per block"},"dataGasPriceUpdateFraction":{"v":2225652,"d":"The denominator used in the exponential when calculating a data gas price"}},"gasPrices":{"simpleGasPerBlob":{"v":12000,"d":"The basic gas fee for each blob"},"minDataGasPrice":{"v":1,"d":"The minimum fee per data gas"},"kzgPointEvaluationGasPrecompilePrice":{"v":50000,"d":"The fee associated with the point evaluation precompile"},"datahash":{"v":3,"d":"Base fee of the DATAHASH opcode"}},"sharding":{"blobCommitmentVersionKzg":{"v":1,"d":"The number indicated a versioned hash is a KZG commitment"},"fieldElementsPerBlob":{"v":4096,"d":"The number of field elements allowed per blob"}},"vm":{},"pow":{}}')},15357:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-4895","number":4895,"comment":"Beacon chain push withdrawals as operations","url":"https://eips.ethereum.org/EIPS/eip-4895","status":"Review","minimumHardfork":"merge","requiredEIPs":[],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},84304:function(e){"use strict";e.exports=JSON.parse('{"name":"EIP-5133","number":5133,"comment":"Delaying Difficulty Bomb to mid-September 2022","url":"https://eips.ethereum.org/EIPS/eip-5133","status":"Draft","minimumHardfork":"grayGlacier","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":11400000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},24211:function(e){"use strict";e.exports=JSON.parse('{"name":"arrowGlacier","comment":"HF to delay the difficulty bomb","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/arrow-glacier.md","status":"Final","eips":[4345],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},15880:function(e){"use strict";e.exports=JSON.parse('{"name":"berlin","comment":"HF targeted for July 2020 following the Muir Glacier HF","url":"https://eips.ethereum.org/EIPS/eip-2070","status":"Final","eips":[2565,2929,2718,2930]}')},3099:function(e){"use strict";e.exports=JSON.parse('{"name":"byzantium","comment":"Hardfork with new precompiles, instructions and other protocol changes","url":"https://eips.ethereum.org/EIPS/eip-609","status":"Final","gasConfig":{},"gasPrices":{"modexpGquaddivisor":{"v":20,"d":"Gquaddivisor from modexp precompile for gas calculation"},"ecAdd":{"v":500,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":40000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":100000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":80000,"d":"Gas costs regarding curve pairing precompile input length"},"revert":{"v":0,"d":"Base fee of the REVERT opcode"},"staticcall":{"v":700,"d":"Base fee of the STATICCALL opcode"},"returndatasize":{"v":2,"d":"Base fee of the RETURNDATASIZE opcode"},"returndatacopy":{"v":3,"d":"Base fee of the RETURNDATACOPY opcode"}},"vm":{},"pow":{"minerReward":{"v":"3000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":3000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},28158:function(e){"use strict";e.exports=JSON.parse('{"name":"chainstart","comment":"Start of the Ethereum main chain","url":"","status":"","gasConfig":{"minGasLimit":{"v":5000,"d":"Minimum the gas limit may ever be"},"gasLimitBoundDivisor":{"v":1024,"d":"The bound divisor of the gas limit, used in update calculations"},"maxRefundQuotient":{"v":2,"d":"Maximum refund quotient; max tx refund is min(tx.gasUsed/maxRefundQuotient, tx.gasRefund)"}},"gasPrices":{"base":{"v":2,"d":"Gas base cost, used e.g. for ChainID opcode (Istanbul)"},"tierStep":{"v":[0,2,3,5,8,10,20],"d":"Once per operation, for a selection of them"},"exp":{"v":10,"d":"Base fee of the EXP opcode"},"expByte":{"v":10,"d":"Times ceil(log256(exponent)) for the EXP instruction"},"sha3":{"v":30,"d":"Base fee of the SHA3 opcode"},"sha3Word":{"v":6,"d":"Once per word of the SHA3 operation\'s data"},"sload":{"v":50,"d":"Base fee of the SLOAD opcode"},"sstoreSet":{"v":20000,"d":"Once per SSTORE operation if the zeroness changes from zero"},"sstoreReset":{"v":5000,"d":"Once per SSTORE operation if the zeroness does not change from zero"},"sstoreRefund":{"v":15000,"d":"Once per SSTORE operation if the zeroness changes to zero"},"jumpdest":{"v":1,"d":"Base fee of the JUMPDEST opcode"},"log":{"v":375,"d":"Base fee of the LOG opcode"},"logData":{"v":8,"d":"Per byte in a LOG* operation\'s data"},"logTopic":{"v":375,"d":"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas"},"create":{"v":32000,"d":"Base fee of the CREATE opcode"},"call":{"v":40,"d":"Base fee of the CALL opcode"},"callStipend":{"v":2300,"d":"Free gas given at beginning of call"},"callValueTransfer":{"v":9000,"d":"Paid for CALL when the value transfor is non-zero"},"callNewAccount":{"v":25000,"d":"Paid for CALL when the destination address didn\'t exist prior"},"selfdestructRefund":{"v":24000,"d":"Refunded following a selfdestruct operation"},"memory":{"v":3,"d":"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL"},"quadCoeffDiv":{"v":512,"d":"Divisor for the quadratic particle of the memory cost equation"},"createData":{"v":200,"d":""},"tx":{"v":21000,"d":"Per transaction. NOTE: Not payable on data of calls between transactions"},"txCreation":{"v":32000,"d":"The cost of creating a contract via tx"},"txDataZero":{"v":4,"d":"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions"},"txDataNonZero":{"v":68,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"copy":{"v":3,"d":"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added"},"ecRecover":{"v":3000,"d":""},"sha256":{"v":60,"d":""},"sha256Word":{"v":12,"d":""},"ripemd160":{"v":600,"d":""},"ripemd160Word":{"v":120,"d":""},"identity":{"v":15,"d":""},"identityWord":{"v":3,"d":""},"stop":{"v":0,"d":"Base fee of the STOP opcode"},"add":{"v":3,"d":"Base fee of the ADD opcode"},"mul":{"v":5,"d":"Base fee of the MUL opcode"},"sub":{"v":3,"d":"Base fee of the SUB opcode"},"div":{"v":5,"d":"Base fee of the DIV opcode"},"sdiv":{"v":5,"d":"Base fee of the SDIV opcode"},"mod":{"v":5,"d":"Base fee of the MOD opcode"},"smod":{"v":5,"d":"Base fee of the SMOD opcode"},"addmod":{"v":8,"d":"Base fee of the ADDMOD opcode"},"mulmod":{"v":8,"d":"Base fee of the MULMOD opcode"},"signextend":{"v":5,"d":"Base fee of the SIGNEXTEND opcode"},"lt":{"v":3,"d":"Base fee of the LT opcode"},"gt":{"v":3,"d":"Base fee of the GT opcode"},"slt":{"v":3,"d":"Base fee of the SLT opcode"},"sgt":{"v":3,"d":"Base fee of the SGT opcode"},"eq":{"v":3,"d":"Base fee of the EQ opcode"},"iszero":{"v":3,"d":"Base fee of the ISZERO opcode"},"and":{"v":3,"d":"Base fee of the AND opcode"},"or":{"v":3,"d":"Base fee of the OR opcode"},"xor":{"v":3,"d":"Base fee of the XOR opcode"},"not":{"v":3,"d":"Base fee of the NOT opcode"},"byte":{"v":3,"d":"Base fee of the BYTE opcode"},"address":{"v":2,"d":"Base fee of the ADDRESS opcode"},"balance":{"v":20,"d":"Base fee of the BALANCE opcode"},"origin":{"v":2,"d":"Base fee of the ORIGIN opcode"},"caller":{"v":2,"d":"Base fee of the CALLER opcode"},"callvalue":{"v":2,"d":"Base fee of the CALLVALUE opcode"},"calldataload":{"v":3,"d":"Base fee of the CALLDATALOAD opcode"},"calldatasize":{"v":2,"d":"Base fee of the CALLDATASIZE opcode"},"calldatacopy":{"v":3,"d":"Base fee of the CALLDATACOPY opcode"},"codesize":{"v":2,"d":"Base fee of the CODESIZE opcode"},"codecopy":{"v":3,"d":"Base fee of the CODECOPY opcode"},"gasprice":{"v":2,"d":"Base fee of the GASPRICE opcode"},"extcodesize":{"v":20,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":20,"d":"Base fee of the EXTCODECOPY opcode"},"blockhash":{"v":20,"d":"Base fee of the BLOCKHASH opcode"},"coinbase":{"v":2,"d":"Base fee of the COINBASE opcode"},"timestamp":{"v":2,"d":"Base fee of the TIMESTAMP opcode"},"number":{"v":2,"d":"Base fee of the NUMBER opcode"},"difficulty":{"v":2,"d":"Base fee of the DIFFICULTY opcode"},"gaslimit":{"v":2,"d":"Base fee of the GASLIMIT opcode"},"pop":{"v":2,"d":"Base fee of the POP opcode"},"mload":{"v":3,"d":"Base fee of the MLOAD opcode"},"mstore":{"v":3,"d":"Base fee of the MSTORE opcode"},"mstore8":{"v":3,"d":"Base fee of the MSTORE8 opcode"},"sstore":{"v":0,"d":"Base fee of the SSTORE opcode"},"jump":{"v":8,"d":"Base fee of the JUMP opcode"},"jumpi":{"v":10,"d":"Base fee of the JUMPI opcode"},"pc":{"v":2,"d":"Base fee of the PC opcode"},"msize":{"v":2,"d":"Base fee of the MSIZE opcode"},"gas":{"v":2,"d":"Base fee of the GAS opcode"},"push":{"v":3,"d":"Base fee of the PUSH opcode"},"dup":{"v":3,"d":"Base fee of the DUP opcode"},"swap":{"v":3,"d":"Base fee of the SWAP opcode"},"callcode":{"v":40,"d":"Base fee of the CALLCODE opcode"},"return":{"v":0,"d":"Base fee of the RETURN opcode"},"invalid":{"v":0,"d":"Base fee of the INVALID opcode"},"selfdestruct":{"v":0,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{"stackLimit":{"v":1024,"d":"Maximum size of VM stack allowed"},"callCreateDepth":{"v":1024,"d":"Maximum depth of call/create stack"},"maxExtraDataSize":{"v":32,"d":"Maximum size extra data may be after Genesis"}},"pow":{"minimumDifficulty":{"v":131072,"d":"The minimum that the difficulty may ever be"},"difficultyBoundDivisor":{"v":2048,"d":"The bound divisor of the difficulty, used in the update calculations"},"durationLimit":{"v":13,"d":"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not"},"epochDuration":{"v":30000,"d":"Duration between proof-of-work epochs"},"timebombPeriod":{"v":100000,"d":"Exponential difficulty timebomb period"},"minerReward":{"v":"5000000000000000000","d":"the amount a miner get rewarded for mining a block"},"difficultyBombDelay":{"v":0,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},3068:function(e){"use strict";e.exports=JSON.parse('{"name":"constantinople","comment":"Postponed hardfork including EIP-1283 (SSTORE gas metering changes)","url":"https://eips.ethereum.org/EIPS/eip-1013","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":200,"d":"Once per SSTORE operation if the value doesn\'t change"},"netSstoreInitGas":{"v":20000,"d":"Once per SSTORE operation from clean zero"},"netSstoreCleanGas":{"v":5000,"d":"Once per SSTORE operation from clean non-zero"},"netSstoreDirtyGas":{"v":200,"d":"Once per SSTORE operation from dirty"},"netSstoreClearRefund":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"netSstoreResetRefund":{"v":4800,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"netSstoreResetClearRefund":{"v":19800,"d":"Once per SSTORE operation for resetting to the original zero value"},"shl":{"v":3,"d":"Base fee of the SHL opcode"},"shr":{"v":3,"d":"Base fee of the SHR opcode"},"sar":{"v":3,"d":"Base fee of the SAR opcode"},"extcodehash":{"v":400,"d":"Base fee of the EXTCODEHASH opcode"},"create2":{"v":32000,"d":"Base fee of the CREATE2 opcode"}},"vm":{},"pow":{"minerReward":{"v":"2000000000000000000","d":"The amount a miner gets rewarded for mining a block"},"difficultyBombDelay":{"v":5000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},36888:function(e){"use strict";e.exports=JSON.parse('{"name":"dao","comment":"DAO rescue hardfork","url":"https://eips.ethereum.org/EIPS/eip-779","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},87184:function(e){"use strict";e.exports=JSON.parse('{"name":"grayGlacier","comment":"Delaying the difficulty bomb to Mid September 2022","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/gray-glacier.md","status":"Draft","eips":[5133],"gasConfig":{},"gasPrices":{},"vm":{},"pow":{}}')},45516:function(e){"use strict";e.exports=JSON.parse('{"name":"homestead","comment":"Homestead hardfork with protocol and network changes","url":"https://eips.ethereum.org/EIPS/eip-606","status":"Final","gasConfig":{},"gasPrices":{"delegatecall":{"v":40,"d":"Base fee of the DELEGATECALL opcode"}},"vm":{},"pow":{}}')},10208:function(e){"use strict";e.exports=JSON.parse('{"name":"istanbul","comment":"HF targeted for December 2019 following the Constantinople/Petersburg HF","url":"https://eips.ethereum.org/EIPS/eip-1679","status":"Final","gasConfig":{},"gasPrices":{"blake2Round":{"v":1,"d":"Gas cost per round for the Blake2 F precompile"},"ecAdd":{"v":150,"d":"Gas costs for curve addition precompile"},"ecMul":{"v":6000,"d":"Gas costs for curve multiplication precompile"},"ecPairing":{"v":45000,"d":"Base gas costs for curve pairing precompile"},"ecPairingWord":{"v":34000,"d":"Gas costs regarding curve pairing precompile input length"},"txDataNonZero":{"v":16,"d":"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions"},"sstoreSentryGasEIP2200":{"v":2300,"d":"Minimum gas required to be present for an SSTORE call, not consumed"},"sstoreNoopGasEIP2200":{"v":800,"d":"Once per SSTORE operation if the value doesn\'t change"},"sstoreDirtyGasEIP2200":{"v":800,"d":"Once per SSTORE operation if a dirty value is changed"},"sstoreInitGasEIP2200":{"v":20000,"d":"Once per SSTORE operation from clean zero to non-zero"},"sstoreInitRefundEIP2200":{"v":19200,"d":"Once per SSTORE operation for resetting to the original zero value"},"sstoreCleanGasEIP2200":{"v":5000,"d":"Once per SSTORE operation from clean non-zero to something else"},"sstoreCleanRefundEIP2200":{"v":4200,"d":"Once per SSTORE operation for resetting to the original non-zero value"},"sstoreClearRefundEIP2200":{"v":15000,"d":"Once per SSTORE operation for clearing an originally existing storage slot"},"balance":{"v":700,"d":"Base fee of the BALANCE opcode"},"extcodehash":{"v":700,"d":"Base fee of the EXTCODEHASH opcode"},"chainid":{"v":2,"d":"Base fee of the CHAINID opcode"},"selfbalance":{"v":5,"d":"Base fee of the SELFBALANCE opcode"},"sload":{"v":800,"d":"Base fee of the SLOAD opcode"}},"vm":{},"pow":{}}')},73352:function(e){"use strict";e.exports=JSON.parse('{"name":"london","comment":"HF targeted for July 2021 following the Berlin fork","url":"https://github.com/ethereum/eth1.0-specs/blob/master/network-upgrades/mainnet-upgrades/london.md","status":"Final","eips":[1559,3198,3529,3541]}')},977:function(e){"use strict";e.exports=JSON.parse('{"name":"merge","comment":"Hardfork to upgrade the consensus mechanism to Proof-of-Stake","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/merge.md","status":"Final","consensus":{"type":"pos","algorithm":"casper","casper":{}},"eips":[3675,4399]}')},99402:function(e){"use strict";e.exports=JSON.parse('{"name":"mergeForkIdTransition","comment":"Pre-merge hardfork to fork off non-upgraded clients","url":"https://eips.ethereum.org/EIPS/eip-3675","status":"Draft","eips":[]}')},90050:function(e){"use strict";e.exports=JSON.parse('{"name":"muirGlacier","comment":"HF to delay the difficulty bomb","url":"https://eips.ethereum.org/EIPS/eip-2384","status":"Final","gasConfig":{},"gasPrices":{},"vm":{},"pow":{"difficultyBombDelay":{"v":9000000,"d":"the amount of blocks to delay the difficulty bomb with"}}}')},13385:function(e){"use strict";e.exports=JSON.parse('{"name":"petersburg","comment":"Aka constantinopleFix, removes EIP-1283, activate together with or after constantinople","url":"https://eips.ethereum.org/EIPS/eip-1716","status":"Final","gasConfig":{},"gasPrices":{"netSstoreNoopGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreInitGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreCleanGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreDirtyGas":{"v":null,"d":"Removed along EIP-1283"},"netSstoreClearRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetRefund":{"v":null,"d":"Removed along EIP-1283"},"netSstoreResetClearRefund":{"v":null,"d":"Removed along EIP-1283"}},"vm":{},"pow":{}}')},30369:function(e){"use strict";e.exports=JSON.parse('{"name":"shanghai","comment":"Next feature hardfork after the merge hardfork having withdrawals, warm coinbase, push0, limit/meter initcode","url":"https://github.com/ethereum/execution-specs/blob/master/network-upgrades/mainnet-upgrades/shanghai.md","status":"Final","eips":[3651,3855,3860,4895]}')},7968:function(e){"use strict";e.exports=JSON.parse('{"name":"shardingFork","comment":"Internal hardfork to test proto-danksharding (do not use in production)","url":"https://eips.ethereum.org/EIPS/eip-4844","status":"Experimental","eips":[4844]}')},82146:function(e){"use strict";e.exports=JSON.parse('{"name":"spuriousDragon","comment":"HF with EIPs for simple replay attack protection, EXP cost increase, state trie clearing, contract code size limit","url":"https://eips.ethereum.org/EIPS/eip-607","status":"Final","gasConfig":{},"gasPrices":{"expByte":{"v":50,"d":"Times ceil(log256(exponent)) for the EXP instruction"}},"vm":{"maxCodeSize":{"v":24576,"d":"Maximum length of contract code"}},"pow":{}}')},94350:function(e){"use strict";e.exports=JSON.parse('{"name":"tangerineWhistle","comment":"Hardfork with gas cost changes for IO-heavy operations","url":"https://eips.ethereum.org/EIPS/eip-608","status":"Final","gasConfig":{},"gasPrices":{"sload":{"v":200,"d":"Once per SLOAD operation"},"call":{"v":700,"d":"Once per CALL operation & message call transaction"},"extcodesize":{"v":700,"d":"Base fee of the EXTCODESIZE opcode"},"extcodecopy":{"v":700,"d":"Base fee of the EXTCODECOPY opcode"},"balance":{"v":400,"d":"Base fee of the BALANCE opcode"},"delegatecall":{"v":700,"d":"Base fee of the DELEGATECALL opcode"},"callcode":{"v":700,"d":"Base fee of the CALLCODE opcode"},"selfdestruct":{"v":5000,"d":"Base fee of the SELFDESTRUCT opcode"}},"vm":{},"pow":{}}')}}]);