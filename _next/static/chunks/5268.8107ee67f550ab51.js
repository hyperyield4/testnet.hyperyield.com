"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[5268],{55268:function(e,t,n){n.d(t,{getDefaultRoleAssumerWithWebIdentity:function(){return h}});var s=n(65190),r=n(45597),i=n(45410),o=n(96632),a=n(75551),l=n(46093),c=n(61873);class d extends o.mY.classBuilder().ep(a.q).m(function(e,t,n,s){return[(0,i.p2)(n,this.serialize,this.deserialize),(0,r.a3)(n,e.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(l.Cz,l.b4).ser(c.pO).de(c.l$).build(){}let u="us-east-1",f=e=>{if("string"==typeof e?.Arn){let t=e.Arn.split(":");if(t.length>4&&""!==t[4])return t[4]}},p=async(e,t,n)=>{let s="function"==typeof e?await e():e,r="function"==typeof t?await t():t;return n?.debug?.("@aws-sdk/client-sts::resolveRegion","accepting first of:",`${s} (provider)`,`${r} (parent client)`,`${u} (STS default)`),s??r??u},S=(e,t)=>{let n;return async r=>{if(!n){let{logger:s=e?.parentClientConfig?.logger,region:r,requestHandler:i=e?.parentClientConfig?.requestHandler,credentialProviderLogger:o}=e;n=new t({region:await p(r,e?.parentClientConfig?.region,o),requestHandler:g(i)?void 0:i,logger:s})}let{Credentials:i,AssumedRoleUser:o}=await n.send(new d(r));if(!i||!i.AccessKeyId||!i.SecretAccessKey)throw Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${r.RoleArn}`);let a=f(o),l={accessKeyId:i.AccessKeyId,secretAccessKey:i.SecretAccessKey,sessionToken:i.SessionToken,expiration:i.Expiration,...i.CredentialScope&&{credentialScope:i.CredentialScope},...a&&{accountId:a}};return a&&(0,s.P)(l,"RESOLVED_ACCOUNT_ID","T"),(0,s.P)(l,"CREDENTIALS_STS_ASSUME_ROLE_WEB_ID","k"),l}},g=e=>e?.metadata?.handlerProtocol==="h2";var y=n(48021);let C=(e,t)=>t?class extends e{constructor(e){for(let n of(super(e),t))this.middlewareStack.use(n)}}:e,h=(e={},t)=>S(e,C(y.X,t))}}]);